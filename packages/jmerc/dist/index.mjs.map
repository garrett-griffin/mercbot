{"version":3,"sources":["../src/client.ts","../src/api/api-routes.ts","../src/api/baseAPI.ts","../src/models/index.ts","../src/models/enums/index.ts","../src/models/enums/assetEnum.ts","../src/models/enums/buildingTypeEnum.ts","../src/models/enums/buildingUpgradeTypeEnum.ts","../src/models/enums/climateEnum.ts","../src/models/enums/itemEnum.ts","../src/models/enums/itemTypeEnum.ts","../src/models/enums/recipeEnum.ts","../src/models/enums/skillEnum.ts","../src/models/enums/skillLevelEnum.ts","../src/models/enums/transportTypeEnum.ts","../src/models/baseModel.ts","../src/schema/index.ts","../src/schema/enums/index.ts","../src/schema/enums/AssetEnumSchema.ts","../src/schema/enums/BuildingTypeEnumSchema.ts","../src/schema/enums/BuildingUpgradeTypeEnumSchema.ts","../src/schema/enums/ClimateEnumSchema.ts","../src/schema/enums/ItemEnumSchema.ts","../src/schema/enums/ItemTypeEnumSchema.ts","../src/schema/enums/RecipeEnumSchema.ts","../src/schema/enums/SkillEnumSchema.ts","../src/schema/enums/SkillLevelEnumSchema.ts","../src/schema/enums/TransportTypeEnumSchema.ts","../src/schema/AccountAssetSchema.ts","../src/schema/AccountSchema.ts","../src/schema/BuildingConstructionEffortSchema.ts","../src/schema/InventorySchema.ts","../src/schema/ManagerSchema.ts","../src/schema/FlowSchema.ts","../src/schema/BuildingConstructionSchema.ts","../src/schema/BuildingOperationSchema.ts","../src/schema/OperationSchema.ts","../src/schema/DeliveryCostSchema.ts","../src/schema/BuildingRequirementSchema.ts","../src/schema/BuildingRequirementsSchema.ts","../src/schema/TileRequirementSchema.ts","../src/schema/BuildingSchema.ts","../src/schema/LocationSchema.ts","../src/schema/ProducerSchema.ts","../src/schema/BuildingStorageSchema.ts","../src/schema/BuildingTypeSchema.ts","../src/schema/BuildingUpgradeSchema.ts","../src/schema/BusinessBuildingSchema.ts","../src/schema/BusinessSchema.ts","../src/schema/CommonersSchema.ts","../src/schema/TownDemandCategorySchema.ts","../src/schema/TownDemandSchema.ts","../src/schema/HouseholdSchema.ts","../src/schema/PrestigeImpactSchema.ts","../src/schema/WorkerSchema.ts","../src/schema/SustenanceSchema.ts","../src/schema/IngredientSchema.ts","../src/schema/ItemOrderSchema.ts","../src/schema/ItemPriceSchema.ts","../src/schema/ItemSchema.ts","../src/schema/ItemTradeResultSchema.ts","../src/schema/ItemTradeSettlementSchema.ts","../src/schema/ItemTradeSchema.ts","../src/schema/MarketItemDetailsSchema.ts","../src/schema/MarketItemSchema.ts","../src/schema/MarketSchema.ts","../src/schema/NotificationSettingsSchema.ts","../src/schema/PathSchema.ts","../src/schema/PlayerSchema.ts","../src/schema/SettingsSchema.ts","../src/schema/RecipeSchema.ts","../src/schema/RegionSchema.ts","../src/schema/StructureSchema.ts","../src/schema/TileSchema.ts","../src/schema/TownChurchSchema.ts","../src/schema/TownCultureSchema.ts","../src/schema/TownDataSchema.ts","../src/schema/TownGovernmentSchema.ts","../src/schema/TownGovernmentTaxesSchema.ts","../src/schema/TownSchema.ts","../src/schema/TradeRouteSchema.ts","../src/schema/TransportCargoSchema.ts","../src/schema/TransportJourneyLegSchema.ts","../src/schema/TransportJourneySchema.ts","../src/schema/TransportSchema.ts","../src/schema/TransportTypeSchema.ts","../src/schema/TurnSchema.ts","../src/models/account.ts","../src/models/building.ts","../src/models/business.ts","../src/models/commoners.ts","../src/models/deliveryCost.ts","../src/models/flow.ts","../src/models/inventory.ts","../src/models/item.ts","../src/models/itemTrade.ts","../src/models/location.ts","../src/models/manager.ts","../src/models/market.ts","../src/models/operation.ts","../src/models/path.ts","../src/models/player.ts","../src/models/producer.ts","../src/models/recipe.ts","../src/models/region.ts","../src/models/structure.ts","../src/models/tile.ts","../src/models/town.ts","../src/models/transport.ts","../src/models/turn.ts","../src/api/turns.ts","../src/api/players.ts","../src/utils/index.ts","../src/utils/conversion.ts","../src/utils/errors.ts","../src/api/towns.ts","../src/api/buildings.ts","../src/api/businesses.ts","../src/api/regions.ts","../src/api/static.ts","../src/api/transports.ts","../src/game/town.ts","../src/game/recipe.ts","../src/game/building.ts","../src/game/exports.ts","../src/game/imports.ts","../src/game/operation.ts","../src/game/transport.ts","../src/game/player.ts","../src/game/storehouse.ts","../src/game/index.ts","../src/api/index.ts"],"sourcesContent":["import axios, {AxiosInstance} from 'axios';\r\nimport {apiRoutes, apiUrl} from \"./api/api-routes\";\r\nimport TurnsAPI from './api/turns';\r\nimport PlayerAPI from './api/players';\r\nimport TownsAPI from './api/towns';\r\nimport BuildingsAPI from './api/buildings';\r\nimport BusinessesAPI from './api/businesses';\r\nimport RegionsAPI from './api/regions';\r\nimport StaticAPI from './api/static';\r\nimport TransportsAPI from './api/transports';\r\nimport {RecipeEnumType} from \"./schema/enums/RecipeEnumSchema\";\r\nimport { Town } from \"./game/town\";\r\nimport { Player } from \"./game/player\";\r\nimport { BuildingOperation, Operation } from \"./game/operation\"\r\nimport {Recipe} from \"./game/recipe\";\r\nimport {Recipe as RecipeModel} from \"./models/recipe\"\r\nimport {Building} from \"./game/building\";\r\nimport {Transport} from \"./game/transport\";\r\nimport {Storehouse} from \"./game/storehouse\";\r\nimport { Operation as OperationModel } from \"./models/operation\"\r\n\r\n/**\r\n * Client for interacting with the Mercatorio API.\r\n */\r\nexport class Client {\r\n    private user: string;\r\n    private token: string;\r\n    private baseUrl: string;\r\n    private session: AxiosInstance;\r\n    endpoint: string;\r\n    buildingsApi: BuildingsAPI;\r\n    businessesApi: BusinessesAPI;\r\n    regionsApi: RegionsAPI;\r\n    playerApi: PlayerAPI;\r\n    staticApi: StaticAPI;\r\n    townsApi: TownsAPI;\r\n    transportsApi: TransportsAPI;\r\n\r\n\r\n    /**\r\n     * Creates an instance of Client.\r\n     * @param user - The API username.\r\n     * @param token - The API token.\r\n     * @param baseUrl - The base URL for the API.\r\n     */\r\n    constructor(user: string, token: string, baseUrl: string = apiUrl) {\r\n        this.user = user;\r\n        this.token = token;\r\n        this.baseUrl = baseUrl;\r\n        this.session = axios.create({\r\n            baseURL: this.baseUrl,\r\n            headers: {\r\n                'X-Merc-User': this.user,\r\n                'Authorization': `Bearer ${this.token}`,\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n\r\n        this.buildingsApi = new BuildingsAPI(this);\r\n        this.businessesApi = new BusinessesAPI(this);\r\n        this.regionsApi = new RegionsAPI(this);\r\n        this.playerApi = new PlayerAPI(this);\r\n        this.staticApi = new StaticAPI(this);\r\n        this.townsApi = new TownsAPI(this);\r\n        this.transportsApi = new TransportsAPI(this);\r\n    }\r\n\r\n    /**\r\n     * Makes a GET request.\r\n     * @returns The response data.\r\n     */\r\n    async get(endpoint: string): Promise<object> {\r\n        try {\r\n            const response = await this.session.get(endpoint);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`GET ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**-\r\n     * Makes a PATCH request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async patch(endpoint: string, data: object): Promise<object> {\r\n        try {\r\n            return await this.session.patch(endpoint, data);\r\n        } catch (error) {\r\n            throw new Error(`PATCH ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a POST request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async post(endpoint: string, data: object): Promise<object> {\r\n        try {\r\n            const response = await this.session.post(endpoint, data);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`POST ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a PUT request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async put(endpoint: string, data: object): Promise<object> {\r\n        try {\r\n            const response = await this.session.put(endpoint, data);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw new Error(`PUT ${endpoint} failed: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    get Turn(): TurnsAPI {\r\n        return new TurnsAPI(this);\r\n    }\r\n\r\n    async getTurn(): Promise<object> {\r\n        const turnAPI = new TurnsAPI(this);\r\n        return await turnAPI.get();\r\n    }\r\n\r\n    get Player(): PlayerAPI {\r\n        return new PlayerAPI(this);\r\n    }\r\n\r\n    async getPlayer(): Promise<Player> {\r\n        const p = new Player(this);\r\n        await p.load();\r\n        return p;\r\n    }\r\n\r\n    get Towns(): TownsAPI {\r\n        return new TownsAPI(this);\r\n    }\r\n\r\n    async getTowns(filter: string[] = []): Promise<Town[]> {\r\n        const townsAPI = new TownsAPI(this);\r\n        const towns = await townsAPI.getAll();\r\n        const tasks = towns\r\n            .filter(town => !filter.length || filter.includes(town.name))\r\n            .map(town => this.getTown(town.id));\r\n        return await Promise.all(tasks) as Town[];\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async getTown(id: number): Promise<Town> {\r\n        const data = await this.townsApi.getTown(id);\r\n        return new Town(this, id, data);\r\n    }\r\n\r\n    async getBuilding(player: Player, id: number): Promise<Building> {\r\n        /**\r\n         * Get a building by its ID.\r\n         *\r\n         * @param player - The player.\r\n         * @param id - The ID of the building.\r\n         *\r\n         * @returns The building with the given ID.\r\n         */\r\n        const b = new Building(this, player, id);\r\n        await b.load();\r\n\r\n        return b;\r\n    }\r\n\r\n    async getBuildingOperation(player: Player, buildingId: number): Promise<BuildingOperation> {\r\n        const buildingOperation = new BuildingOperation(this, player, buildingId);\r\n        await buildingOperation.load();\r\n        return buildingOperation;\r\n    }\r\n\r\n    async getOperation(player: Player, buildingOperation: BuildingOperation, operation: OperationModel): Promise<Operation> {\r\n        const op = new Operation(this, player, buildingOperation, operation);\r\n        await op.load();\r\n        return op;\r\n    }\r\n\r\n    async getRecipe(options: {recipe?: RecipeModel, recipeName?: RecipeEnumType}): Promise<Recipe> {\r\n        const r = new Recipe({ client: this, recipe: options.recipe, recipeName: options.recipeName});\r\n        await r.load();\r\n        return r;\r\n    }\r\n\r\n    async getStorehouse(player: Player): Promise<Storehouse> {\r\n        const storehouse = new Storehouse(this, player);\r\n        await storehouse.load();\r\n        return storehouse;\r\n    }\r\n\r\n    async getTransport(player: Player, id: number): Promise<Transport> {\r\n        const transport = new Transport(this, player, id);\r\n        await transport.load();\r\n        return transport;\r\n    }\r\n}\r\n\r\nexport default Client;\r\n","import { z } from 'zod';\r\n\r\nexport const rootUrl = 'https://play.mercatorio.io/'\r\nexport const apiUrl = rootUrl + 'api/';\r\nexport const staticUrl = rootUrl + 'static/js/';\r\n\r\nexport const apiRoutes = {\r\n    buildings: `buildings/:id`,\r\n    buildingOperations: `buildings/:id/operations`,\r\n    buildingSetManager: `buildings/:id/storage/inventory/:item`,\r\n    business: `businesses/:id`,\r\n    marketData: `towns/:id/marketdata`,\r\n    marketItem: `towns/:id/markets/:item`,\r\n    orders: `towns/:id/markets/:item/orders`,\r\n    player: `player`,\r\n    producer: `buildings/:id/producer`,\r\n    regions: `map/regions`,\r\n    towns: `towns`,\r\n    townData: `towns/:id`,\r\n    transports: `transports/:id`,\r\n    transportManager: `transports/:id/route/inventory/item`,\r\n    turn: `clock`,\r\n    // Add more routes here\r\n};","import Client from '../client';\r\nimport AxiosResponse from 'axios';\r\n\r\nexport interface ResponseObject {\r\n    // `data` is the response that was provided by the server\r\n    data?: object,\r\n\r\n    // `status` is the HTTP status code from the server response\r\n    status?: number,\r\n\r\n    // `statusText` is the HTTP status message from the server response\r\n    // As of HTTP/2 status text is blank or unsupported.\r\n    // (HTTP/2 RFC: https://www.rfc-editor.org/rfc/rfc7540#section-8.1.2.4)\r\n    statusText?: string,\r\n\r\n    // `headers` the HTTP headers that the server responded with\r\n    // All header names are lower cased and can be accessed using the bracket notation.\r\n    // Example: `response.headers['content-type']`\r\n    headers?: object,\r\n\r\n    // `config` is the config that was provided to `axios` for the request\r\n    config?: object,\r\n\r\n    // `request` is the request that generated this response\r\n    // It is the last ClientRequest instance in node.js (in redirects)\r\n    // and an XMLHttpRequest instance in the browser\r\n    request?: object\r\n}\r\n\r\nabstract class BaseAPI {\r\n    private client: Client;\r\n    endpoint: string;\r\n\r\n    /**\r\n     * Creates an instance of BaseAPI.\r\n     * @param client - The client to use for making requests.\r\n     */\r\n    constructor(client: Client) {\r\n        this.client = client;\r\n    }\r\n\r\n    /**\r\n     * Makes a GET request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param id - The id of the object to get.\r\n     * @param item - The name of the item to get.\r\n     * @returns The response data.\r\n     */\r\n    async get({ endpoint, id, item }: { endpoint?: string, id?: number, item?: string } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url = url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url = url.replace(':item', item);\r\n        }\r\n        return this.client.get(url);\r\n    }\r\n\r\n    /**\r\n     * Makes a POST request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param id - The id of the object to get.\r\n     * @param item - The name of the item to get.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async post({ endpoint, id, item, data }: { endpoint?: string, id?: number, item?: string, data?: object } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url = url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url = url.replace(':item', item);\r\n        }\r\n        return this.client.post(url, data);\r\n    }\r\n\r\n    /**\r\n     * Makes a PUT request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async put({ endpoint, id, item, data }: { endpoint?: string, id?: number, item?: string, data?: object } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url = url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url = url.replace(':item', item);\r\n        }\r\n        return this.client.put(url, data);\r\n    }\r\n\r\n    /**\r\n     * Makes a PATCH request.\r\n     * @param endpoint - The API endpoint.\r\n     * @param data - The data to send.\r\n     * @returns The response data.\r\n     */\r\n    async patch({ endpoint, id, item, data }: { endpoint?: string, id?: number, item?: string, data?: object } = {}): Promise<object> {\r\n        let url = this.endpoint;\r\n        if(endpoint) {\r\n            url = endpoint;\r\n        }\r\n        if(id) {\r\n            url = url.replace(':id', id.toString());\r\n        }\r\n        if(item) {\r\n            url = url.replace(':item', item);\r\n        }\r\n        return this.client.patch(url, data);\r\n    }\r\n}\r\n\r\nexport default BaseAPI;\r\n","import * as enums from './enums'\n\nexport * from './account';\nexport * from './building';\nexport * from './business';\nexport * from './commoners';\nexport * from './deliveryCost';\nexport * from './flow';\nexport * from './inventory';\nexport * from './item';\nexport * from './itemTrade';\nexport * from './location';\nexport * from './manager';\nexport * from './market';\nexport * from './operation';\nexport * from './path';\nexport * from './player';\nexport * from './producer';\nexport * from './recipe';\nexport * from './region';\nexport * from './structure';\nexport * from './tile';\nexport * from './town';\nexport * from './transport';\nexport * from './turn';\n\nexport { enums }","export * from './assetEnum';\nexport * from './buildingTypeEnum';\nexport * from './buildingUpgradeTypeEnum';\nexport * from './climateEnum';\nexport * from './itemEnum';\nexport * from './itemTypeEnum';\nexport * from './recipeEnum';\nexport * from './skillEnum';\nexport * from './skillLevelEnum';\nexport * from './transportTypeEnum';\n","export enum AssetEnum {\r\n    Cog = \"cog\",\r\n    Handcart = \"handcart\",\r\n    Hulk = \"hulk\",\r\n    Money = \"money\",\r\n    Snekkja = \"snekkja\",\r\n    Tumbrel = \"tumbrel\"\r\n}","export enum BuildingTypeEnum {\r\n    Apothecary = \"apothecary\",\r\n    Bakery = \"bakery\",\r\n    Bloomery = \"bloomery\",\r\n    BoardingHouse = \"boardinghouse\",\r\n    Brewery = \"brewery\",\r\n    Brickworks = \"brickworks\",\r\n    Butchery = \"butchery\",\r\n    Carpentry = \"carpentry\",\r\n    Cartshed = \"cartshed\",\r\n    Cathedral = \"cathedral\",\r\n    Center = \"center\",\r\n    CeramicKiln = \"ceramic kiln\",\r\n    Chandlery = \"chandlery\",\r\n    Chapel = \"chapel\",\r\n    CharcoalHut = \"charcoal hut\",\r\n    CharcoalKiln = \"charcoal kiln\",\r\n    Church = \"church\",\r\n    ClayPit = \"clay pit\",\r\n    CopperMine = \"copper mine\",\r\n    Coppersmith = \"coppersmith\",\r\n    Cottage = \"cottage\",\r\n    Dairy = \"dairy\",\r\n    DyeBoiler = \"dye boiler\",\r\n    Dyeworks = \"dyeworks\",\r\n    Farmstead = \"farmstead\",\r\n    Fisher = \"fisher\",\r\n    FishingShack = \"fishing shack\",\r\n    FlaxFarm = \"flax farm\",\r\n    Foundry = \"foundry\",\r\n    GlassBlower = \"glass blower\",\r\n    GlassHouse = \"glass house\",\r\n    GoldMine = \"gold mine\",\r\n    GrainFarm = \"grain farm\",\r\n    Guardhouse = \"guardhouse\",\r\n    HerbGarden = \"herb garden\",\r\n    Hjell = \"hjell\",\r\n    Household = \"household\",\r\n    HuntingLodge = \"hunting lodge\",\r\n    IronMine = \"iron mine\",\r\n    Jeweller = \"jeweller\",\r\n    LeadMine = \"lead mine\",\r\n    Leatherworks = \"leatherworks\",\r\n    LoggingCamp = \"logging camp\",\r\n    Markethall = \"markethall\",\r\n    Malthouse = \"malthouse\",\r\n    Mansion = \"mansion\",\r\n    Mint = \"mint\",\r\n    NetMaker = \"net maker\",\r\n    Outpost = \"outpost\",\r\n    Park = \"park\",\r\n    Pasture = \"pasture\",\r\n    Quarry = \"quarry\",\r\n    RettingPit = \"retting pit\",\r\n    Ropewalk = \"ropewalk\",\r\n    Rowhouse = \"rowhouse\",\r\n    SailLoft = \"sail loft\",\r\n    Saltery = \"saltery\",\r\n    SaltMine = \"salt mine\",\r\n    Sawmill = \"sawmill\",\r\n    SewingShop = \"sewing shop\",\r\n    Shipyard = \"shipyard\",\r\n    Smithy = \"smithy\",\r\n    Smokery = \"smokery\",\r\n    Spinnery = \"spinnery\",\r\n    Stable = \"stable\",\r\n    Storehouse = \"storehouse\",\r\n    Square = \"square\",\r\n    Tannery = \"tannery\",\r\n    TarKiln = \"tar kiln\",\r\n    Toolworks = \"toolworks\",\r\n    Townhall = \"townhall\",\r\n    Townhouse = \"townhouse\",\r\n    Townroad = \"townroad\",\r\n    Vignoble = \"vignoble\",\r\n    Warehouse = \"warehouse\",\r\n    Weavery = \"weavery\",\r\n    Windmill = \"windmill\"\r\n}","export enum BuildingUpgradeTypeEnum {\r\n    Armsrack = \"armsrack\",\r\n    Beehives = \"beehives\",\r\n    Bellows = \"bellows\",\r\n    ButtonCast = \"button cast\",\r\n    Cowshed = \"cowshed\",\r\n    Crane = \"crane\",\r\n    CraneLift = \"crane lift\",\r\n    CuringChamber = \"curing chamber\",\r\n    CuttingTable = \"cutting table\",\r\n    Fermentory = \"fermentory\",\r\n    Grindstone = \"grindstone\",\r\n    GroovedBedstone = \"grooved bedstone\",\r\n    GuardBooth = \"guard booth\",\r\n    HoppingVessels = \"hopping vessels\",\r\n    LimeKiln = \"lime kiln\",\r\n    LimingPots = \"liming pots\",\r\n    MaltMill = \"malt mill\",\r\n    MaltSieve = \"malt sieve\",\r\n    ManurePit = \"manure pit\",\r\n    PloughHouse = \"plough house\",\r\n    SkinningTable = \"skinning table\",\r\n    SpinningWheel = \"spinning wheel\",\r\n    SteelAnvil = \"steel anvil\",\r\n    StoneOven = \"stone oven\",\r\n    StonecuttersHut = \"stonecutter's hut\",\r\n    TileMoulds = \"tile moulds\",\r\n    Toolshed = \"toolshed\",\r\n    Transmission = \"transmission\",\r\n    TreadleLoom = \"treadle loom\",\r\n    UpholstryBench = \"upholstry bench\",\r\n    Warehouse = \"warehouse\",\r\n    Weaponsrack = \"weaponsrack\"\r\n}","export enum ClimateEnum {\r\n    Cold = \"cold\",\r\n    Warm = \"warm\"\r\n}","export enum ItemEnum {\r\n    Alembics = \"alembics\",\r\n    Arms = \"arms\",\r\n    Axes = \"axes\",\r\n    Beer = \"beer\",\r\n    Belts = \"belts\",\r\n    Blades = \"blades\",\r\n    Bread = \"bread\",\r\n    Bricks = \"bricks\",\r\n    Butter = \"butter\",\r\n    Candles = \"candles\",\r\n    Carting = \"carting\",\r\n    Casks = \"casks\",\r\n    Cattle = \"cattle\",\r\n    Charcoal = \"charcoal\",\r\n    Cheese = \"cheese\",\r\n    Clay = \"clay\",\r\n    Cloth = \"cloth\",\r\n    Coats = \"coats\",\r\n    Cog = \"cog\",\r\n    Cookware = \"cookware\",\r\n    CopperIngots = \"copper ingots\",\r\n    CopperOre = \"copper ore\",\r\n    CuredFish = \"cured fish\",\r\n    CuredMeat = \"cured meat\",\r\n    Donations = \"donations\",\r\n    Dye = \"dye\",\r\n    DyedCloth = \"dyed cloth\",\r\n    Firewood = \"firewood\",\r\n    Fish = \"fish\",\r\n    FlaxFibres = \"flax fibres\",\r\n    FlaxPlants = \"flax plants\",\r\n    Flour = \"flour\",\r\n    Furniture = \"furniture\",\r\n    Garments = \"garments\",\r\n    Glass = \"glass\",\r\n    Glassware = \"glassware\",\r\n    GoldBars = \"gold bars\",\r\n    GoldOre = \"gold ore\",\r\n    Grain = \"grain\",\r\n    Grindstones = \"grindstones\",\r\n    Ham = \"ham\",\r\n    Handcart = \"handcart\",\r\n    Harnesses = \"harnesses\",\r\n    Herbs = \"herbs\",\r\n    Hides = \"hides\",\r\n    Honey = \"honey\",\r\n    HopBeer = \"hop beer\",\r\n    Hulk = \"hulk\",\r\n    IronOre = \"iron ore\",\r\n    Jewellery = \"jewellery\",\r\n    Labour = \"labour\",\r\n    LeadBars = \"lead bars\",\r\n    LeadOre = \"lead ore\",\r\n    Leather = \"leather\",\r\n    LightArmor = \"light armor\",\r\n    Limestone = \"limestone\",\r\n    Lodging = \"lodging\",\r\n    Lumber = \"lumber\",\r\n    Malt = \"malt\",\r\n    Manure = \"manure\",\r\n    Meat = \"meat\",\r\n    Medicine = \"medicine\",\r\n    Milk = \"milk\",\r\n    Money = \"money\",\r\n    Mouldboards = \"mouldboards\",\r\n    Nails = \"nails\",\r\n    Nets = \"nets\",\r\n    OxPower = \"ox power\",\r\n    Pasties = \"pasties\",\r\n    Pickaxes = \"pickaxes\",\r\n    Pies = \"pies\",\r\n    Ploughs = \"ploughs\",\r\n    Protection = \"protection\",\r\n    Resin = \"resin\",\r\n    Rope = \"rope\",\r\n    Sails = \"sails\",\r\n    Salt = \"salt\",\r\n    Scythes = \"scythes\",\r\n    SilverBars = \"silver bars\",\r\n    SlakedLime = \"slaked lime\",\r\n    Snekkja = \"snekkja\",\r\n    Spirits = \"spirits\",\r\n    SteelIngots = \"steel ingots\",\r\n    Stockfish = \"stockfish\",\r\n    Swords = \"swords\",\r\n    Tar = \"tar\",\r\n    Thread = \"thread\",\r\n    Tiles = \"tiles\",\r\n    Timber = \"timber\",\r\n    Tools = \"tools\",\r\n    Tumbrel = \"tumbrel\",\r\n    Wax = \"wax\",\r\n    Wheels = \"wheels\",\r\n    Windows = \"windows\",\r\n    Wine = \"wine\",\r\n    Wool = \"wool\",\r\n    WroughtIron = \"wrought iron\",\r\n    Yarn = \"yarn\"\r\n}","export enum ItemTypeEnum {\r\n    Commodity = \"commodity\",\r\n    Service = \"service\",\r\n    Special = \"special\"\r\n}","export enum RecipeEnum {\r\n    BakeBread1 = \"bake bread 1\",\r\n    BakeBread2 = \"bake bread 2\",\r\n    BakePasties1 = \"bake pasties 1\",\r\n    BakePasties2 = \"bake pasties 2\",\r\n    BakePies1 = \"bake pies 1\",\r\n    BindGarments1 = \"bind garments 1\",\r\n    BindGarments2 = \"bind garments 2\",\r\n    BlowGlassware1 = \"blow glassware 1\",\r\n    BlowGlassware2 = \"blow glassware 2\",\r\n    BoilDye1 = \"boil dye 1\",\r\n    BoilDye2 = \"boil dye 2\",\r\n    BorderPatrol1 = \"border patrol 1\",\r\n    BorderPatrol2 = \"border patrol 2\",\r\n    BreedCattle1a = \"breed cattle 1a\",\r\n    BreedCattle1b = \"breed cattle 1b\",\r\n    BreedCattle2a = \"breed cattle 2a\",\r\n    BreedCattle2b = \"breed cattle 2b\",\r\n    BrewBeer1 = \"brew beer 1\",\r\n    BrewBeer2 = \"brew beer 2\",\r\n    BrewBeer3 = \"brew beer 3\",\r\n    BrewBeer4 = \"brew beer 4\",\r\n    BrewHopBeer1 = \"brew hop beer 1\",\r\n    BrewHopBeer2 = \"brew hop beer 2\",\r\n    BuildCog1 = \"build cog 1\",\r\n    BuildCog2 = \"build cog 2\",\r\n    BuildHandcart1 = \"build handcart 1\",\r\n    BuildHandcart2 = \"build handcart 2\",\r\n    BuildHulk1 = \"build hulk 1\",\r\n    BuildSnekkja1 = \"build snekkja 1\",\r\n    BuildSnekkja2 = \"build snekkja 2\",\r\n    BuildTumbrel1 = \"build tumbrel 1\",\r\n    BurnBricks1 = \"burn bricks 1\",\r\n    BurnCharcoal1 = \"burn charcoal 1\",\r\n    BurnCharcoal2 = \"burn charcoal 2\",\r\n    BurnCharcoal3 = \"burn charcoal 3\",\r\n    BurnCharcoal4 = \"burn charcoal 4\",\r\n    BurnCookware1 = \"burn cookware 1\",\r\n    BurnCookware2 = \"burn cookware 2\",\r\n    BurnGlass1 = \"burn glass 1\",\r\n    BurnLime1 = \"burn lime 1\",\r\n    BurnTar1 = \"burn tar 1\",\r\n    BurnTar2 = \"burn tar 2\",\r\n    BurnTiles1 = \"burn tiles 1\",\r\n    BurnTiles2 = \"burn tiles 2\",\r\n    ButcherCattle1a = \"butcher cattle 1a\",\r\n    ButcherCattle1b = \"butcher cattle 1b\",\r\n    ButcherCattle2 = \"butcher cattle 2\",\r\n    Carting1 = \"carting 1\",\r\n    Carting2 = \"carting 2\",\r\n    ChurnButter1 = \"churn butter 1\",\r\n    ChurnButter2 = \"churn butter 2\",\r\n    CogOperations = \"cog operations\",\r\n    CraftArms1 = \"craft arms 1\",\r\n    CraftBelts1 = \"craft belts 1\",\r\n    CraftBelts2 = \"craft belts 2\",\r\n    CraftBelts3 = \"craft belts 3\",\r\n    CraftBelts4 = \"craft belts 4\",\r\n    CraftCookware1 = \"craft cookware 1\",\r\n    CraftFurniture1 = \"craft furniture 1\",\r\n    CraftFurniture2 = \"craft furniture 2\",\r\n    CraftFurniture3 = \"craft furniture 3\",\r\n    CraftFurniture4 = \"craft furniture 4\",\r\n    CraftPloughs1 = \"craft ploughs 1\",\r\n    CraftPloughs2 = \"craft ploughs 2\",\r\n    CraftPloughs3 = \"craft ploughs 3\",\r\n    CraftScythes1 = \"craft scythes 1\",\r\n    CraftScythes2 = \"craft scythes 2\",\r\n    CraftTools1 = \"craft tools 1\",\r\n    CraftTools2 = \"craft tools 2\",\r\n    CraftWheels1 = \"craft wheels 1\",\r\n    CraftWheels2 = \"craft wheels 2\",\r\n    CraftWheels3 = \"craft wheels 3\",\r\n    CutBricks1 = \"cut bricks 1\",\r\n    CutGrindstones1 = \"cut grindstones 1\",\r\n    DeliveryDuty1 = \"delivery duty 1\",\r\n    DeliveryDuty2 = \"delivery duty 2\",\r\n    DigClay1 = \"dig clay 1\",\r\n    DigClay2 = \"dig clay 2\",\r\n    DistillSpirits2 = \"distill spirits 2\",\r\n    DryFish1 = \"dry fish 1\",\r\n    DryFish2 = \"dry fish 2\",\r\n    DryStockfish1 = \"dry stockfish 1\",\r\n    DryStockfish2 = \"dry stockfish 2\",\r\n    DyeCloth1 = \"dye cloth 1\",\r\n    DyeCloth2 = \"dye cloth 2\",\r\n    ExtractStone1 = \"extract stone 1\",\r\n    ExtractStone2 = \"extract stone 2\",\r\n    ExtractStone3 = \"extract stone 3\",\r\n    Fishing1 = \"fishing 1\",\r\n    Fishing2a = \"fishing 2a\",\r\n    Fishing2b = \"fishing 2b\",\r\n    Fishing3 = \"fishing 3\",\r\n    ForgeArms1 = \"forge arms 1\",\r\n    ForgeArms2 = \"forge arms 2\",\r\n    ForgeArms2b = \"forge arms 2b\",\r\n    ForgeAxes1 = \"forge axes 1\",\r\n    ForgeAxes1b = \"forge axes 1b\",\r\n    ForgeAxes2 = \"forge axes 2\",\r\n    ForgeAxes2b = \"forge axes 2b\",\r\n    ForgeBlades1 = \"forge blades 1\",\r\n    ForgeBlades1b = \"forge blades 1b\",\r\n    ForgeBlades2 = \"forge blades 2\",\r\n    ForgeBlades2b = \"forge blades 2b\",\r\n    ForgeMouldboards1 = \"forge mouldboards 1\",\r\n    ForgePickaxes1 = \"forge pickaxes 1\",\r\n    ForgePickaxes1b = \"forge pickaxes 1b\",\r\n    ForgePickaxes2 = \"forge pickaxes 2\",\r\n    ForgePickaxes2b = \"forge pickaxes 2b\",\r\n    ForgeSwords1 = \"forge swords 1\",\r\n    ForgeSwords1b = \"forge swords 1b\",\r\n    ForgeSwords2 = \"forge swords 2\",\r\n    ForgeSwords2b = \"forge swords 2b\",\r\n    ForgeTools1 = \"forge tools 1\",\r\n    ForgeTools2 = \"forge tools 2\",\r\n    ForgeTools3 = \"forge tools 3\",\r\n    GatherFirewood1 = \"gather firewood 1\",\r\n    GatherFirewood2 = \"gather firewood 2\",\r\n    GatherFirewood3 = \"gather firewood 3\",\r\n    GatherResin1 = \"gather resin 1\",\r\n    GatherResin2 = \"gather resin 2\",\r\n    GrainPayment = \"grain payment\",\r\n    GrowFlax1 = \"grow flax 1\",\r\n    GrowFlax2 = \"grow flax 2\",\r\n    GrowFlax3 = \"grow flax 3\",\r\n    GrowFlax4a = \"grow flax 4a\",\r\n    GrowFlax4b = \"grow flax 4b\",\r\n    GrowGrain1 = \"grow grain 1\",\r\n    GrowGrain2 = \"grow grain 2\",\r\n    GrowGrain3a = \"grow grain 3a\",\r\n    GrowGrain3b = \"grow grain 3b\",\r\n    GrowGrain4a = \"grow grain 4a\",\r\n    GrowGrain4b = \"grow grain 4b\",\r\n    GrowHerbs1 = \"grow herbs 1\",\r\n    GrowHerbs2 = \"grow herbs 2\",\r\n    HammerNails1 = \"hammer nails 1\",\r\n    HandcartOperations = \"handcart operations\",\r\n    HarnessOx1 = \"harness ox 1\",\r\n    HarnessOx2a = \"harness ox 2a\",\r\n    HarnessOx2b = \"harness ox 2b\",\r\n    HarnessOx3a = \"harness ox 3a\",\r\n    HarnessOx3b = \"harness ox 3b\",\r\n    HarnessOx4a = \"harness ox 4a\",\r\n    HarnessOx4b = \"harness ox 4b\",\r\n    HerdSheep1 = \"herd sheep 1\",\r\n    HerdSheep2 = \"herd sheep 2\",\r\n    HoldBanquet1a = \"hold banquet 1a\",\r\n    HoldBanquet1b = \"hold banquet 1b\",\r\n    HoldBanquet2a = \"hold banquet 2a\",\r\n    HoldBanquet2b = \"hold banquet 2b\",\r\n    HoldBanquet2c = \"hold banquet 2c\",\r\n    HoldBanquet3a = \"hold banquet 3a\",\r\n    HoldBanquet3b = \"hold banquet 3b\",\r\n    HoldBanquet3c = \"hold banquet 3c\",\r\n    HoldBanquet4a = \"hold banquet 4a\",\r\n    HoldBanquet4b = \"hold banquet 4b\",\r\n    HoldFeast1 = \"hold feast 1\",\r\n    HoldFeast2 = \"hold feast 2\",\r\n    HoldFeast3 = \"hold feast 3\",\r\n    HoldMass1 = \"hold mass 1\",\r\n    HoldMass2 = \"hold mass 2\",\r\n    HoldMass3 = \"hold mass 3\",\r\n    HoldPrayer1 = \"hold prayer 1\",\r\n    HoldPrayer2 = \"hold prayer 2\",\r\n    HoldPrayer3 = \"hold prayer 3\",\r\n    HoldSermon1 = \"hold sermon 1\",\r\n    HoldSermon2a = \"hold sermon 2a\",\r\n    HoldSermon2b = \"hold sermon 2b\",\r\n    HoldSermon3a = \"hold sermon 3a\",\r\n    HoldSermon3b = \"hold sermon 3b\",\r\n    HulkOperations = \"hulk operations\",\r\n    Hunting1 = \"hunting 1\",\r\n    Hunting2 = \"hunting 2\",\r\n    Hunting3 = \"hunting 3\",\r\n    Hunting4 = \"hunting 4\",\r\n    Hunting5 = \"hunting 5\",\r\n    KeepBees1 = \"keep bees 1\",\r\n    KnightDuty1 = \"knight duty 1\",\r\n    KnightDuty2 = \"knight duty 2\",\r\n    KnightDuty3 = \"knight duty 3\",\r\n    KnightDuty4 = \"knight duty 4\",\r\n    KnitGarments1 = \"knit garments 1\",\r\n    KnitGarments2 = \"knit garments 2\",\r\n    LetCottages1 = \"let cottages 1\",\r\n    LetCottages2 = \"let cottages 2\",\r\n    LetRowhouses1 = \"let rowhouses 1\",\r\n    LetRowhouses2 = \"let rowhouses 2\",\r\n    LetRowhouses3 = \"let rowhouses 3\",\r\n    Logging1 = \"logging 1\",\r\n    Logging2 = \"logging 2\",\r\n    Logging3 = \"logging 3\",\r\n    Logging4 = \"logging 4\",\r\n    Maintain1 = \"maintain 1\",\r\n    MakeAlembics1 = \"make alembics 1\",\r\n    MakeAlembics2 = \"make alembics 2\",\r\n    MakeBricks1 = \"make bricks 1\",\r\n    MakeBricks2 = \"make bricks 2\",\r\n    MakeCandles1 = \"make candles 1\",\r\n    MakeCandles2 = \"make candles 2\",\r\n    MakeCasks1 = \"make casks 1\",\r\n    MakeCasks2 = \"make casks 2\",\r\n    MakeCheese1 = \"make cheese 1\",\r\n    MakeCheese2 = \"make cheese 2\",\r\n    MakeCheese3 = \"make cheese 3\",\r\n    MakeCheese4 = \"make cheese 4\",\r\n    MakeCheese5 = \"make cheese 5\",\r\n    MakeHarnesses1 = \"make harnesses 1\",\r\n    MakeHarnesses2 = \"make harnesses 2\",\r\n    MakeHarnesses2b = \"make harnesses 2b\",\r\n    MakeJewellery1 = \"make jewellery 1\",\r\n    MakeJewellery2 = \"make jewellery 2\",\r\n    MakeLeatherArmor1 = \"make leather armor 1\",\r\n    MakeMedicine1 = \"make medicine 1\",\r\n    MakeMedicine2 = \"make medicine 2\",\r\n    MakeNets1 = \"make nets 1\",\r\n    MakeNets2 = \"make nets 2\",\r\n    MakeNets3 = \"make nets 3\",\r\n    MakeRope1 = \"make rope 1\",\r\n    MakeRope2 = \"make rope 2\",\r\n    MakeRope3 = \"make rope 3\",\r\n    MakeWindows1 = \"make windows 1\",\r\n    MakeWindows2 = \"make windows 2\",\r\n    MakeWine1 = \"make wine 1\",\r\n    MakeWine2 = \"make wine 2\",\r\n    MakeWine3 = \"make wine 3\",\r\n    Malting1 = \"malting 1\",\r\n    Malting2 = \"malting 2\",\r\n    Milling1 = \"milling 1\",\r\n    Milling2 = \"milling 2\",\r\n    Milling3 = \"milling 3\",\r\n    MineCopper1 = \"mine copper 1\",\r\n    MineCopper2 = \"mine copper 2\",\r\n    MineCopper3 = \"mine copper 3\",\r\n    MineCopper4 = \"mine copper 4\",\r\n    MineCopper5 = \"mine copper 5\",\r\n    MineGold1 = \"mine gold 1\",\r\n    MineGold1b = \"mine gold 1b\",\r\n    MineGold2 = \"mine gold 2\",\r\n    MineGold2b = \"mine gold 2b\",\r\n    MineGold3 = \"mine gold 3\",\r\n    MineIron1 = \"mine iron 1\",\r\n    MineIron2 = \"mine iron 2\",\r\n    MineIron3 = \"mine iron 3\",\r\n    MineIron4 = \"mine iron 4\",\r\n    MineIron5 = \"mine iron 5\",\r\n    MineLead1 = \"mine lead 1\",\r\n    MineLead2 = \"mine lead 2\",\r\n    MineLead2b = \"mine lead 2b\",\r\n    MineLead3 = \"mine lead 3\",\r\n    MineLead3b = \"mine lead 3b\",\r\n    MineLead4 = \"mine lead 4\",\r\n    MineSalt1 = \"mine salt 1\",\r\n    MineSalt2 = \"mine salt 2\",\r\n    MineSalt3 = \"mine salt 3\",\r\n    MintCopperCoins1 = \"mint copper coins 1\",\r\n    MintCopperCoins2 = \"mint copper coins 2\",\r\n    MintCopperCoins3 = \"mint copper coins 3\",\r\n    MintGoldCoins1 = \"mint gold coins 1\",\r\n    MintGoldCoins2 = \"mint gold coins 2\",\r\n    MintGoldCoins3 = \"mint gold coins 3\",\r\n    MintLeatherCoins1 = \"mint leather coins 1\",\r\n    MintSilverCoins1 = \"mint silver coins 1\",\r\n    MintSilverCoins2 = \"mint silver coins 2\",\r\n    MintSilverCoins3 = \"mint silver coins 3\",\r\n    MintSteelCoins1 = \"mint steel coins 1\",\r\n    Patrol1 = \"patrol 1\",\r\n    Patrol2a = \"patrol 2a\",\r\n    Patrol2b = \"patrol 2b\",\r\n    Patrol3a = \"patrol 3a\",\r\n    Patrol3b = \"patrol 3b\",\r\n    RefineSteel1 = \"refine steel 1\",\r\n    RefineSteel1b = \"refine steel 1b\",\r\n    RefineSteel2 = \"refine steel 2\",\r\n    RefineSteel2b = \"refine steel 2b\",\r\n    Retting1 = \"retting 1\",\r\n    Retting2 = \"retting 2\",\r\n    SaltingFish1 = \"salting fish 1\",\r\n    SaltingFish2 = \"salting fish 2\",\r\n    SaltingMeat1 = \"salting meat 1\",\r\n    SaltingMeat2 = \"salting meat 2\",\r\n    Sawing1 = \"sawing 1\",\r\n    Sawing2 = \"sawing 2\",\r\n    Sawing3 = \"sawing 3\",\r\n    Sawing3Firewood = \"sawing 3 (firewood)\",\r\n    Sawing4 = \"sawing 4\",\r\n    Service1 = \"service 1\",\r\n    Service2 = \"service 2\",\r\n    Service3 = \"service 3\",\r\n    Service4 = \"service 4\",\r\n    SewCoats1a = \"sew coats 1a\",\r\n    SewCoats1b = \"sew coats 1b\",\r\n    SewCoats2a = \"sew coats 2a\",\r\n    SewCoats2b = \"sew coats 2b\",\r\n    SewGambeson1 = \"sew gambeson 1\",\r\n    SewGarments1 = \"sew garments 1\",\r\n    SewGarments2a = \"sew garments 2a\",\r\n    SewGarments2b = \"sew garments 2b\",\r\n    SewGarments3a = \"sew garments 3a\",\r\n    SewGarments3b = \"sew garments 3b\",\r\n    SewGarments4a = \"sew garments 4a\",\r\n    SewGarments4b = \"sew garments 4b\",\r\n    SewSails1 = \"sew sails 1\",\r\n    SewSails2 = \"sew sails 2\",\r\n    ShearSheep1 = \"shear sheep 1\",\r\n    ShearSheep2 = \"shear sheep 2\",\r\n    ShearSheep3 = \"shear sheep 3\",\r\n    SmeltCopper1 = \"smelt copper 1\",\r\n    SmeltCopper2 = \"smelt copper 2\",\r\n    SmeltGold1 = \"smelt gold 1\",\r\n    SmeltGold2 = \"smelt gold 2\",\r\n    SmeltIron1 = \"smelt iron 1\",\r\n    SmeltIron2 = \"smelt iron 2\",\r\n    SmeltLead1 = \"smelt lead 1\",\r\n    SmeltLead2a = \"smelt lead 2a\",\r\n    SmeltLead2b = \"smelt lead 2b\",\r\n    SmeltLead3 = \"smelt lead 3 (silver)\",\r\n    SmokingFish1 = \"smoking fish 1\",\r\n    SmokingFish2 = \"smoking fish 2\",\r\n    SmokingHam1 = \"smoking ham 1\",\r\n    SmokingHam2 = \"smoking ham 2\",\r\n    SmokingMeat1 = \"smoking meat 1\",\r\n    SmokingMeat2 = \"smoking meat 2\",\r\n    SnekkjaOperations = \"snekkja operations\",\r\n    SpinThread1 = \"spin thread 1\",\r\n    SpinThread2 = \"spin thread 2\",\r\n    SpinYarn1 = \"spin yarn 1\",\r\n    SpinYarn2 = \"spin yarn 2\",\r\n    SplitTimber1 = \"split timber 1\",\r\n    SplitTimber2 = \"split timber 2\",\r\n    SplitTimber3 = \"split timber 3\",\r\n    TanHides1 = \"tan hides 1\",\r\n    TanHides2 = \"tan hides 2\",\r\n    TanHides3 = \"tan hides 3\",\r\n    TrapFish1 = \"trap fish 1\",\r\n    TrapFish2 = \"trap fish 2\",\r\n    TrapFish3 = \"trap fish 3\",\r\n    Trapping1 = \"trapping 1\",\r\n    Trapping2 = \"trapping 2\",\r\n    TumbrelOperations = \"tumbrel operations\",\r\n    WeaveCloth1 = \"weave cloth 1\",\r\n    WeaveCloth2a = \"weave cloth 2a\",\r\n    WeaveCloth2b = \"weave cloth 2b\",\r\n    WeaveCloth3a = \"weave cloth 3a\",\r\n    WeaveCloth3b = \"weave cloth 3b\",\r\n    WeaveCloth4a = \"weave cloth 4a\",\r\n    WeaveCloth4b = \"weave cloth 4b\",\r\n    YokeOx1a = \"yoke ox 1a\",\r\n    YokeOx1b = \"yoke ox 1b\",\r\n    YokeOx2a = \"yoke ox 2a\",\r\n    YokeOx2b = \"yoke ox 2b\",\r\n    YokeOx3 = \"yoke ox 3\",\r\n    YokeOx3manure = \"yoke ox 3 (manure)\"\r\n}","export enum SkillEnum {\r\n    Crafting = \"crafting\",\r\n    Forging = \"forging\",\r\n    Maritime = \"maritime\",\r\n    Mercantile = \"mercantile\",\r\n    Nutrition = \"nutrition\",\r\n    Textile = \"textile\",\r\n    Weaponry = \"weaponry\"\r\n}","export enum SkillLevelEnum {\r\n    Novice = 99,\r\n    Worker = 599,\r\n    Journeyman = 2699,\r\n    Master = 9999,\r\n}","export enum TransportTypeEnum {\r\n    Cog = \"cog\",\r\n    Handcart = \"handcart\",\r\n    Hulk = \"hulk\",\r\n    Snekkja = \"snekkja\",\r\n    Tumbrel = \"tumbrel\"\r\n}","import { z } from 'zod';\r\n\r\n/**\r\n * A base model class that provides schema validation and initialization of sub-properties.\r\n * Classes extending BaseModel should define a static schema property for validation.\r\n */\r\nexport class BaseModel {\r\n    static schema: z.Schema;\r\n    private initialized = false;\r\n\r\n    constructor(data: any) {\r\n        Object.assign(this, data);\r\n        this.initializeSubProperties();\r\n    }\r\n\r\n    /**\r\n     * Validates the input data against the schema and creates an instance of the class.\r\n     * @param data - The input data to validate and instantiate.\r\n     * @returns A promise that resolves to an instance of the class.\r\n     */\r\n    static async validate<T extends typeof BaseModel>(this: T, data: unknown): Promise<InstanceType<T>> {\r\n        const parsedData = await this.schema.parseAsync(data);\r\n        const instance = new this(parsedData) as InstanceType<T>;\r\n        instance.initializeSubProperties();\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Validates an array of input data against the schema and creates instances of the class.\r\n     * @param data - The input data to validate and instantiate.\r\n     * @returns A promise that resolves to an array of instances of the class.\r\n     */\r\n    static async validateArray<T extends typeof BaseModel>(this: T, data: unknown[]): Promise<InstanceType<T>[]> {\r\n        const parsedDataArray = await Promise.all(data.map(item => this.schema.parseAsync(item)));\r\n        return parsedDataArray.map(parsedData => {\r\n            const instance = new this(parsedData) as InstanceType<T>;\r\n            instance.initializeSubProperties();\r\n            return instance;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes sub-properties of the class instance that are also instances of other classes.\r\n     * It checks each property, and if it's an object with a schema, it creates a new instance of that class.\r\n     */\r\n    initializeSubProperties() {\r\n        if (this.initialized) return;\r\n        for (const key of Object.keys(this)) {\r\n            const value = this[key];\r\n            if (value && typeof value === 'object' && 'schema' in value.constructor) {\r\n                // Re-instantiate property if it has a schema\r\n                this[key] = new (value.constructor as any)(value);\r\n            } else if (Array.isArray(value)) {\r\n                // Re-instantiate array items if they have a schema\r\n                this[key] = value.map((item: any) =>\r\n                    item && typeof item === 'object' && 'schema' in item.constructor ? new (item.constructor as any)(item) : item\r\n                );\r\n            }\r\n        }\r\n        this.initialized = true;\r\n    }\r\n}\r\n","import * as enums from './enums';\n\nexport * from './AccountAssetSchema';\nexport * from './AccountSchema';\nexport * from './BuildingConstructionEffortSchema';\nexport * from './BuildingConstructionSchema';\nexport * from './BuildingOperationSchema';\nexport * from './BuildingRequirementSchema';\nexport * from './BuildingRequirementsSchema';\nexport * from './BuildingSchema';\nexport * from './BuildingStorageSchema';\nexport * from './BuildingTypeSchema';\nexport * from './BuildingUpgradeSchema';\nexport * from './BusinessBuildingSchema';\nexport * from './BusinessSchema';\nexport * from './CommonersSchema';\nexport * from './DeliveryCostSchema';\nexport * from './FlowSchema';\nexport * from './HouseholdSchema';\nexport * from './IngredientSchema';\nexport * from './InventorySchema';\nexport * from './ItemOrderSchema';\nexport * from './ItemPriceSchema';\nexport * from './ItemSchema';\nexport * from './ItemTradeResultSchema';\nexport * from './ItemTradeSchema';\nexport * from './ItemTradeSettlementSchema';\nexport * from './LocationSchema';\nexport * from './ManagerSchema';\nexport * from './MarketItemDetailsSchema';\nexport * from './MarketItemSchema';\nexport * from './MarketSchema';\nexport * from './NotificationSettingsSchema';\nexport * from './OperationSchema';\nexport * from './PathSchema';\nexport * from './PlayerSchema';\nexport * from './PrestigeImpactSchema';\nexport * from './ProducerSchema';\nexport * from './RecipeSchema';\nexport * from './RegionSchema';\nexport * from './SettingsSchema';\nexport * from './StructureSchema';\nexport * from './SustenanceSchema';\nexport * from './TileRequirementSchema';\nexport * from './TileSchema';\nexport * from './TownChurchSchema';\nexport * from './TownCultureSchema';\nexport * from './TownDataSchema';\nexport * from './TownDemandCategorySchema';\nexport * from './TownDemandSchema';\nexport * from './TownGovernmentSchema';\nexport * from './TownGovernmentTaxesSchema';\nexport * from './TownSchema';\nexport * from './TradeRouteSchema';\nexport * from './TransportCargoSchema';\nexport * from './TransportJourneyLegSchema';\nexport * from './TransportJourneySchema';\nexport * from './TransportSchema';\nexport * from './TransportTypeSchema';\nexport * from './TurnSchema';\nexport * from './WorkerSchema';\n\nexport { enums }","export * from './AssetEnumSchema';\nexport * from './BuildingTypeEnumSchema';\nexport * from './BuildingUpgradeTypeEnumSchema';\nexport * from './ClimateEnumSchema';\nexport * from './ItemEnumSchema';\nexport * from './ItemTypeEnumSchema';\nexport * from './RecipeEnumSchema';\nexport * from './SkillEnumSchema';\nexport * from './SkillLevelEnumSchema';\nexport * from './TransportTypeEnumSchema';\n","import { z } from 'zod';\r\n\r\nexport const AssetEnumSchema = z.enum([\r\n    \"cog\",\r\n    \"handcart\",\r\n    \"hulk\",\r\n    \"money\",\r\n    \"snekkja\",\r\n    \"tumbrel\",\r\n]);\r\n\r\nexport type AssetEnumType = z.infer<typeof AssetEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const BuildingTypeEnumSchema = z.enum([\r\n    \"apothecary\",\r\n    \"bakery\",\r\n    \"bloomery\",\r\n    \"boardinghouse\",\r\n    \"brewery\",\r\n    \"brickworks\",\r\n    \"butchery\",\r\n    \"carpentry\",\r\n    \"cartshed\",\r\n    \"cathedral\",\r\n    \"center\",\r\n    \"ceramic kiln\",\r\n    \"chandlery\",\r\n    \"chapel\",\r\n    \"charcoal hut\",\r\n    \"charcoal kiln\",\r\n    \"church\",\r\n    \"clay pit\",\r\n    \"copper mine\",\r\n    \"coppersmith\",\r\n    \"cottage\",\r\n    \"dairy\",\r\n    \"dye boiler\",\r\n    \"dyeworks\",\r\n    \"farmstead\",\r\n    \"fisher\",\r\n    \"fishing shack\",\r\n    \"flax farm\",\r\n    \"foundry\",\r\n    \"glass blower\",\r\n    \"glass house\",\r\n    \"gold mine\",\r\n    \"grain farm\",\r\n    \"guardhouse\",\r\n    \"herb garden\",\r\n    \"hjell\",\r\n    \"household\",\r\n    \"hunting lodge\",\r\n    \"iron mine\",\r\n    \"jeweller\",\r\n    \"lead mine\",\r\n    \"leatherworks\",\r\n    \"logging camp\",\r\n    \"markethall\",\r\n    \"malthouse\",\r\n    \"mansion\",\r\n    \"mint\",\r\n    \"net maker\",\r\n    \"outpost\",\r\n    \"park\",\r\n    \"pasture\",\r\n    \"quarry\",\r\n    \"retting pit\",\r\n    \"ropewalk\",\r\n    \"rowhouse\",\r\n    \"sail loft\",\r\n    \"saltery\",\r\n    \"salt mine\",\r\n    \"sawmill\",\r\n    \"sewing shop\",\r\n    \"shipyard\",\r\n    \"smithy\",\r\n    \"smokery\",\r\n    \"spinnery\",\r\n    \"stable\",\r\n    \"storehouse\",\r\n    \"square\",\r\n    \"tannery\",\r\n    \"tar kiln\",\r\n    \"toolworks\",\r\n    \"townhall\",\r\n    \"townhouse\",\r\n    \"townroad\",\r\n    \"vignoble\",\r\n    \"warehouse\",\r\n    \"weavery\",\r\n    \"windmill\"\r\n]);\r\n\r\nexport type BuildingTypeEnumType = z.infer<typeof BuildingTypeEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const BuildingUpgradeTypeEnumSchema = z.enum([\r\n    \"armsrack\",\r\n    \"beehives\",\r\n    \"bellows\",\r\n    \"button cast\",\r\n    \"cowshed\",\r\n    \"crane\",\r\n    \"crane lift\",\r\n    \"curing chamber\",\r\n    \"cutting table\",\r\n    \"fermentory\",\r\n    \"grindstone\",\r\n    \"grooved bedstone\",\r\n    \"guard booth\",\r\n    \"hopping vessels\",\r\n    \"lime kiln\",\r\n    \"liming pots\",\r\n    \"malt mill\",\r\n    \"malt sieve\",\r\n    \"manure pit\",\r\n    \"plough house\",\r\n    \"skinning table\",\r\n    \"spinning wheel\",\r\n    \"steel anvil\",\r\n    \"stone oven\",\r\n    \"stonecutter's hut\",\r\n    \"tile moulds\",\r\n    \"toolshed\",\r\n    \"transmission\",\r\n    \"treadle loom\",\r\n    \"upholstry bench\",\r\n    \"warehouse\",\r\n    \"weaponsrack\"\r\n]);\r\n\r\nexport type BuildingUpgradeTypeEnumType = z.infer<typeof BuildingUpgradeTypeEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ClimateEnumSchema = z.enum([\r\n    \"cold\",\r\n    \"warm\"\r\n]);\r\n\r\nexport type ClimateEnumType = z.infer<typeof ClimateEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemEnumSchema = z.enum([\r\n    \"alembics\",\r\n    \"arms\",\r\n    \"axes\",\r\n    \"beer\",\r\n    \"belts\",\r\n    \"blades\",\r\n    \"bread\",\r\n    \"bricks\",\r\n    \"butter\",\r\n    \"candles\",\r\n    \"carting\",\r\n    \"casks\",\r\n    \"cattle\",\r\n    \"charcoal\",\r\n    \"cheese\",\r\n    \"clay\",\r\n    \"cloth\",\r\n    \"coats\",\r\n    \"cog\",\r\n    \"cookware\",\r\n    \"copper ingots\",\r\n    \"copper ore\",\r\n    \"cured fish\",\r\n    \"cured meat\",\r\n    \"donations\",\r\n    \"dye\",\r\n    \"dyed cloth\",\r\n    \"firewood\",\r\n    \"fish\",\r\n    \"flax fibres\",\r\n    \"flax plants\",\r\n    \"flour\",\r\n    \"furniture\",\r\n    \"garments\",\r\n    \"glass\",\r\n    \"glassware\",\r\n    \"gold bars\",\r\n    \"gold ore\",\r\n    \"grain\",\r\n    \"grindstones\",\r\n    \"ham\",\r\n    \"handcart\",\r\n    \"harnesses\",\r\n    \"herbs\",\r\n    \"hides\",\r\n    \"honey\",\r\n    \"hop beer\",\r\n    \"hulk\",\r\n    \"iron ore\",\r\n    \"jewellery\",\r\n    \"labour\",\r\n    \"lead bars\",\r\n    \"lead ore\",\r\n    \"leather\",\r\n    \"light armor\",\r\n    \"limestone\",\r\n    \"lodging\",\r\n    \"lumber\",\r\n    \"malt\",\r\n    \"manure\",\r\n    \"meat\",\r\n    \"medicine\",\r\n    \"milk\",\r\n    \"money\",\r\n    \"mouldboards\",\r\n    \"nails\",\r\n    \"nets\",\r\n    \"ox power\",\r\n    \"pasties\",\r\n    \"pickaxes\",\r\n    \"pies\",\r\n    \"ploughs\",\r\n    \"protection\",\r\n    \"resin\",\r\n    \"rope\",\r\n    \"sails\",\r\n    \"salt\",\r\n    \"scythes\",\r\n    \"silver bars\",\r\n    \"slaked lime\",\r\n    \"snekkja\",\r\n    \"spirits\",\r\n    \"steel ingots\",\r\n    \"stockfish\",\r\n    \"swords\",\r\n    \"tar\",\r\n    \"thread\",\r\n    \"tiles\",\r\n    \"timber\",\r\n    \"tools\",\r\n    \"tumbrel\",\r\n    \"wax\",\r\n    \"wheels\",\r\n    \"windows\",\r\n    \"wine\",\r\n    \"wool\",\r\n    \"wrought iron\",\r\n    \"yarn\"\r\n]);\r\n\r\nexport type ItemEnumType = z.infer<typeof ItemEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemTypeEnumSchema = z.enum([\r\n    \"commodity\",\r\n    \"service\",\r\n    \"special\"\r\n]);\r\n\r\nexport type ItemTypeEnumType = z.infer<typeof ItemTypeEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const RecipeEnumSchema = z.enum([\r\n    \"bake bread 1\",\r\n    \"bake bread 2\",\r\n    \"bake pasties 1\",\r\n    \"bake pasties 2\",\r\n    \"bake pies 1\",\r\n    \"bind garments 1\",\r\n    \"bind garments 2\",\r\n    \"blow glassware 1\",\r\n    \"blow glassware 2\",\r\n    \"boil dye 1\",\r\n    \"boil dye 2\",\r\n    \"border patrol 1\",\r\n    \"border patrol 2\",\r\n    \"breed cattle 1a\",\r\n    \"breed cattle 1b\",\r\n    \"breed cattle 2a\",\r\n    \"breed cattle 2b\",\r\n    \"brew beer 1\",\r\n    \"brew beer 2\",\r\n    \"brew beer 3\",\r\n    \"brew beer 4\",\r\n    \"brew hop beer 1\",\r\n    \"brew hop beer 2\",\r\n    \"build cog 1\",\r\n    \"build cog 2\",\r\n    \"build handcart 1\",\r\n    \"build handcart 2\",\r\n    \"build hulk 1\",\r\n    \"build snekkja 1\",\r\n    \"build snekkja 2\",\r\n    \"build tumbrel 1\",\r\n    \"burn bricks 1\",\r\n    \"burn charcoal 1\",\r\n    \"burn charcoal 2\",\r\n    \"burn charcoal 3\",\r\n    \"burn charcoal 4\",\r\n    \"burn cookware 1\",\r\n    \"burn cookware 2\",\r\n    \"burn glass 1\",\r\n    \"burn lime 1\",\r\n    \"burn tar 1\",\r\n    \"burn tar 2\",\r\n    \"burn tiles 1\",\r\n    \"burn tiles 2\",\r\n    \"butcher cattle 1a\",\r\n    \"butcher cattle 1b\",\r\n    \"butcher cattle 2\",\r\n    \"carting 1\",\r\n    \"carting 2\",\r\n    \"churn butter 1\",\r\n    \"churn butter 2\",\r\n    \"cog operations\",\r\n    \"craft arms 1\",\r\n    \"craft belts 1\",\r\n    \"craft belts 2\",\r\n    \"craft belts 3\",\r\n    \"craft belts 4\",\r\n    \"craft cookware 1\",\r\n    \"craft furniture 1\",\r\n    \"craft furniture 2\",\r\n    \"craft furniture 3\",\r\n    \"craft furniture 4\",\r\n    \"craft ploughs 1\",\r\n    \"craft ploughs 2\",\r\n    \"craft ploughs 3\",\r\n    \"craft scythes 1\",\r\n    \"craft scythes 2\",\r\n    \"craft tools 1\",\r\n    \"craft tools 2\",\r\n    \"craft wheels 1\",\r\n    \"craft wheels 2\",\r\n    \"craft wheels 3\",\r\n    \"cut bricks 1\",\r\n    \"cut grindstones 1\",\r\n    \"delivery duty 1\",\r\n    \"delivery duty 2\",\r\n    \"dig clay 1\",\r\n    \"dig clay 2\",\r\n    \"distill spirits 1\",\r\n    \"distill spirits 2\",\r\n    \"dry fish 1\",\r\n    \"dry fish 2\",\r\n    \"dry stockfish 1\",\r\n    \"dry stockfish 2\",\r\n    \"dye cloth 1\",\r\n    \"dye cloth 2\",\r\n    \"extract stone 1\",\r\n    \"extract stone 2\",\r\n    \"extract stone 3\",\r\n    \"fishing 1\",\r\n    \"fishing 2a\",\r\n    \"fishing 2b\",\r\n    \"fishing 3\",\r\n    \"forge arms 1\",\r\n    \"forge arms 2\",\r\n    \"forge arms 2b\",\r\n    \"forge axes 1\",\r\n    \"forge axes 1b\",\r\n    \"forge axes 2\",\r\n    \"forge axes 2b\",\r\n    \"forge blades 1\",\r\n    \"forge blades 1b\",\r\n    \"forge blades 2\",\r\n    \"forge blades 2b\",\r\n    \"forge mouldboards 1\",\r\n    \"forge pickaxes 1\",\r\n    \"forge pickaxes 1b\",\r\n    \"forge pickaxes 2\",\r\n    \"forge pickaxes 2b\",\r\n    \"forge swords 1\",\r\n    \"forge swords 1b\",\r\n    \"forge swords 2\",\r\n    \"forge swords 2b\",\r\n    \"forge tools 1\",\r\n    \"forge tools 2\",\r\n    \"forge tools 3\",\r\n    \"gather firewood 1\",\r\n    \"gather firewood 2\",\r\n    \"gather firewood 3\",\r\n    \"gather resin 1\",\r\n    \"gather resin 2\",\r\n    \"grain payment\",\r\n    \"grow flax 1\",\r\n    \"grow flax 2\",\r\n    \"grow flax 3\",\r\n    \"grow flax 4a\",\r\n    \"grow flax 4b\",\r\n    \"grow grain 1\",\r\n    \"grow grain 2\",\r\n    \"grow grain 3a\",\r\n    \"grow grain 3b\",\r\n    \"grow grain 4a\",\r\n    \"grow grain 4b\",\r\n    \"grow herbs 1\",\r\n    \"grow herbs 2\",\r\n    \"hammer nails 1\",\r\n    \"handcart operations\",\r\n    \"harness ox 1\",\r\n    \"harness ox 2a\",\r\n    \"harness ox 2b\",\r\n    \"harness ox 3a\",\r\n    \"harness ox 3b\",\r\n    \"harness ox 4a\",\r\n    \"harness ox 4b\",\r\n    \"herd sheep 1\",\r\n    \"herd sheep 2\",\r\n    \"hold banquet 1a\",\r\n    \"hold banquet 1b\",\r\n    \"hold banquet 2a\",\r\n    \"hold banquet 2b\",\r\n    \"hold banquet 2c\",\r\n    \"hold banquet 3a\",\r\n    \"hold banquet 3b\",\r\n    \"hold banquet 3c\",\r\n    \"hold banquet 4a\",\r\n    \"hold banquet 4b\",\r\n    \"hold feast 1\",\r\n    \"hold feast 2\",\r\n    \"hold feast 3\",\r\n    \"hold mass 1\",\r\n    \"hold mass 2\",\r\n    \"hold mass 3\",\r\n    \"hold prayer 1\",\r\n    \"hold prayer 2\",\r\n    \"hold prayer 3\",\r\n    \"hold sermon 1\",\r\n    \"hold sermon 2a\",\r\n    \"hold sermon 2b\",\r\n    \"hold sermon 3a\",\r\n    \"hold sermon 3b\",\r\n    \"hulk operations\",\r\n    \"hunting 1\",\r\n    \"hunting 2\",\r\n    \"hunting 3\",\r\n    \"hunting 4\",\r\n    \"hunting 5\",\r\n    \"keep bees 1\",\r\n    \"knight duty 1\",\r\n    \"knight duty 2\",\r\n    \"knight duty 3\",\r\n    \"knight duty 4\",\r\n    \"knit garments 1\",\r\n    \"knit garments 2\",\r\n    \"let cottages 1\",\r\n    \"let cottages 2\",\r\n    \"let rowhouses 1\",\r\n    \"let rowhouses 2\",\r\n    \"let rowhouses 3\",\r\n    \"logging 1\",\r\n    \"logging 2\",\r\n    \"logging 3\",\r\n    \"logging 4\",\r\n    \"maintain 1\",\r\n    \"make alembics 1\",\r\n    \"make alembics 2\",\r\n    \"make bricks 1\",\r\n    \"make bricks 2\",\r\n    \"make candles 1\",\r\n    \"make candles 2\",\r\n    \"make casks 1\",\r\n    \"make casks 2\",\r\n    \"make cheese 1\",\r\n    \"make cheese 2\",\r\n    \"make cheese 3\",\r\n    \"make cheese 4\",\r\n    \"make cheese 5\",\r\n    \"make harnesses 1\",\r\n    \"make harnesses 2\",\r\n    \"make harnesses 2b\",\r\n    \"make jewellery 1\",\r\n    \"make jewellery 2\",\r\n    \"make leather armor 1\",\r\n    \"make medicine 1\",\r\n    \"make medicine 2\",\r\n    \"make nets 1\",\r\n    \"make nets 2\",\r\n    \"make nets 3\",\r\n    \"make rope 1\",\r\n    \"make rope 2\",\r\n    \"make rope 3\",\r\n    \"make windows 1\",\r\n    \"make windows 2\",\r\n    \"make wine 1\",\r\n    \"make wine 2\",\r\n    \"make wine 3\",\r\n    \"malting 1\",\r\n    \"malting 2\",\r\n    \"milling 1\",\r\n    \"milling 2\",\r\n    \"milling 3\",\r\n    \"mine copper 1\",\r\n    \"mine copper 2\",\r\n    \"mine copper 3\",\r\n    \"mine copper 4\",\r\n    \"mine copper 5\",\r\n    \"mine gold 1\",\r\n    \"mine gold 1b\",\r\n    \"mine gold 2\",\r\n    \"mine gold 2b\",\r\n    \"mine gold 3\",\r\n    \"mine iron 1\",\r\n    \"mine iron 2\",\r\n    \"mine iron 3\",\r\n    \"mine iron 4\",\r\n    \"mine iron 5\",\r\n    \"mine lead 1\",\r\n    \"mine lead 2\",\r\n    \"mine lead 2b\",\r\n    \"mine lead 3\",\r\n    \"mine lead 3b\",\r\n    \"mine lead 4\",\r\n    \"mine salt 1\",\r\n    \"mine salt 2\",\r\n    \"mine salt 3\",\r\n    \"mint copper coins 1\",\r\n    \"mint copper coins 2\",\r\n    \"mint copper coins 3\",\r\n    \"mint gold coins 1\",\r\n    \"mint gold coins 2\",\r\n    \"mint gold coins 3\",\r\n    \"mint leather coins 1\",\r\n    \"mint silver coins 1\",\r\n    \"mint silver coins 2\",\r\n    \"mint silver coins 3\",\r\n    \"mint steel coins 1\",\r\n    \"patrol 1\",\r\n    \"patrol 2a\",\r\n    \"patrol 2b\",\r\n    \"patrol 3a\",\r\n    \"patrol 3b\",\r\n    \"refine steel 1\",\r\n    \"refine steel 1b\",\r\n    \"refine steel 2\",\r\n    \"refine steel 2b\",\r\n    \"retting 1\",\r\n    \"retting 2\",\r\n    \"salting fish 1\",\r\n    \"salting fish 2\",\r\n    \"salting meat 1\",\r\n    \"salting meat 2\",\r\n    \"sawing 1\",\r\n    \"sawing 2\",\r\n    \"sawing 3\",\r\n    \"sawing 3 (firewood)\",\r\n    \"sawing 4\",\r\n    \"service 1\",\r\n    \"service 2\",\r\n    \"service 3\",\r\n    \"service 4\",\r\n    \"sew coats 1a\",\r\n    \"sew coats 1b\",\r\n    \"sew coats 2a\",\r\n    \"sew coats 2b\",\r\n    \"sew gambeson 1\",\r\n    \"sew garments 1\",\r\n    \"sew garments 2a\",\r\n    \"sew garments 2b\",\r\n    \"sew garments 3a\",\r\n    \"sew garments 3b\",\r\n    \"sew garments 4a\",\r\n    \"sew garments 4b\",\r\n    \"sew sails 1\",\r\n    \"sew sails 2\",\r\n    \"shear sheep 1\",\r\n    \"shear sheep 2\",\r\n    \"shear sheep 3\",\r\n    \"smelt copper 1\",\r\n    \"smelt copper 2\",\r\n    \"smelt gold 1\",\r\n    \"smelt gold 2\",\r\n    \"smelt iron 1\",\r\n    \"smelt iron 2\",\r\n    \"smelt lead 1\",\r\n    \"smelt lead 2a\",\r\n    \"smelt lead 2b\",\r\n    \"smelt lead 3 (silver)\",\r\n    \"smoking fish 1\",\r\n    \"smoking fish 2\",\r\n    \"smoking ham 1\",\r\n    \"smoking ham 2\",\r\n    \"smoking meat 1\",\r\n    \"smoking meat 2\",\r\n    \"snekkja operations\",\r\n    \"spin thread 1\",\r\n    \"spin thread 2\",\r\n    \"spin yarn 1\",\r\n    \"spin yarn 2\",\r\n    \"split timber 1\",\r\n    \"split timber 2\",\r\n    \"split timber 3\",\r\n    \"tan hides 1\",\r\n    \"tan hides 2\",\r\n    \"tan hides 3\",\r\n    \"trap fish 1\",\r\n    \"trap fish 2\",\r\n    \"trap fish 3\",\r\n    \"trapping 1\",\r\n    \"trapping 2\",\r\n    \"tumbrel operations\",\r\n    \"weave cloth 1\",\r\n    \"weave cloth 2a\",\r\n    \"weave cloth 2b\",\r\n    \"weave cloth 3a\",\r\n    \"weave cloth 3b\",\r\n    \"weave cloth 4a\",\r\n    \"weave cloth 4b\",\r\n    \"yoke ox 1a\",\r\n    \"yoke ox 1b\",\r\n    \"yoke ox 2a\",\r\n    \"yoke ox 2b\",\r\n    \"yoke ox 3\",\r\n    \"yoke ox 3 (manure)\"\r\n]);\r\n\r\nexport type RecipeEnumType = z.infer<typeof RecipeEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const SkillEnumSchema = z.enum([\r\n    \"crafting\",\r\n    \"forging\",\r\n    \"maritime\",\r\n    \"mercantile\",\r\n    \"nutrition\",\r\n    \"textile\",\r\n    \"weaponry\"\r\n]);\r\n\r\nexport type SkillEnumType = z.infer<typeof SkillEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const SkillLevelEnumSchema = z.enum([\r\n    \"99\",\r\n    \"599\",\r\n    \"2699\",\r\n    \"9999\"\r\n]);\r\n\r\nexport type SkillLevelEnumType = z.infer<typeof SkillLevelEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TransportTypeEnumSchema = z.enum([\r\n    \"cog\",\r\n    \"handcart\",\r\n    \"hulk\",\r\n    \"snekkja\",\r\n    \"tumbrel\"\r\n]);\r\n\r\nexport type TransportTypeEnumType = z.infer<typeof TransportTypeEnumSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const AccountAssetSchema = z.object({\r\n    balance: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    purchase: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    purchase_price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    reserved: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    reserved_capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    sale: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    sale_price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    unit_cost: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type AccountAssetType = z.infer<typeof AccountAssetSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums';\r\nimport { AccountAssetSchema } from './AccountAssetSchema';\r\n\r\nexport const AccountSchema = z.object({\r\n    assets: z.record(ItemEnumSchema, AccountAssetSchema.optional()),\r\n    id: z.string(),\r\n    master_id: z.string().optional(),\r\n    name: z.string().optional(),\r\n    owner_id: z.string(),\r\n    sponsor_id: z.string().optional()\r\n});\r\n\r\nexport type AccountType = z.infer<typeof AccountSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\nimport { BuildingUpgradeTypeEnumSchema } from './enums/BuildingUpgradeTypeEnumSchema';\r\n\r\nexport const BuildingConstructionEffortSchema = z.object({\r\n    inventory: InventorySchema,\r\n    progress: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    reference: z.string(),\r\n    stage: z.string(),\r\n    time: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    upgrade_type: BuildingUpgradeTypeEnumSchema.optional()\r\n});\r\n\r\nexport type BuildingConstructionEffortType = z.infer<typeof BuildingConstructionEffortSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums';\r\nimport { AccountSchema } from './AccountSchema';\r\nimport { ManagerSchema } from './ManagerSchema';\r\nimport { FlowSchema } from './FlowSchema';\r\n\r\nexport const InventorySchema = z.object({\r\n    account: AccountSchema,\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    managers: z.record(ItemEnumSchema, ManagerSchema).optional(),\r\n    previous_flows: z.record(ItemEnumSchema, FlowSchema).optional().default({}),\r\n    reserved: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n});\r\n\r\nexport type InventoryType = z.infer<typeof InventorySchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ManagerSchema = z.object({\r\n    buy_price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    buy_volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    max_holding: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    sell_price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    sell_volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type ManagerType = z.infer<typeof ManagerSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const FlowSchema = z.object({\r\n    consumption: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    expiration: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    export: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    imported: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().nullable().default(null).describe('import'),\r\n    production: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    production_cost: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    purchase: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    purchase_cost: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    resident: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    sale: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    sale_value: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    shortfall: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0))\r\n});\r\n\r\nexport type FlowType = z.infer<typeof FlowSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums';\r\n\r\nexport const BuildingConstructionSchema = z.object({\r\n    range: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    size: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    discount: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    time: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    materials: z.record(ItemEnumSchema, z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]))\r\n});\r\n\r\nexport type BuildingConstructionType = z.infer<typeof BuildingConstructionSchema>;","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums';\r\nimport { FlowSchema } from './FlowSchema';\r\nimport { OperationSchema } from './OperationSchema';\r\n\r\nexport const BuildingOperationSchema = z.object({\r\n    total_flow: z.record(ItemEnumSchema, FlowSchema),\r\n    operations: z.array(OperationSchema).optional().nullable()\r\n});\r\n\r\nexport type BuildingOperationType = z.infer<typeof BuildingOperationSchema>;\r\n","import { z } from 'zod';\r\nimport { DeliveryCostSchema } from './DeliveryCostSchema';\r\nimport { RecipeEnumSchema } from './enums/RecipeEnumSchema';\r\nimport { FlowSchema } from './FlowSchema';\r\nimport {ItemEnumSchema} from \"./enums/ItemEnumSchema\";\r\n\r\nexport const OperationSchema = z.object({\r\n    target: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    production: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    provision: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    reference: z.string().optional(),\r\n    recipe: RecipeEnumSchema.optional(),\r\n    volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    tax_rate: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    tax: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    delivery_cost: DeliveryCostSchema.optional(),\r\n    flows: z.record(ItemEnumSchema, FlowSchema).optional()\r\n});\r\n\r\nexport type OperationType = z.infer<typeof OperationSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const DeliveryCostSchema = z.object({\r\n    land_distance: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    ferry_fee: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type DeliveryCostType = z.infer<typeof DeliveryCostSchema>;\r\n","import { z } from 'zod';\r\nimport { ClimateEnumSchema } from './enums/ClimateEnumSchema';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\nexport const BuildingRequirementSchema = z.object({\r\n    center: z.boolean().optional().default(false),\r\n    climate: ClimateEnumSchema.optional(),\r\n    min: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    resource: ItemEnumSchema.optional()\r\n});\r\n\r\nexport type BuildingRequirementType = z.infer<typeof BuildingRequirementSchema>;\r\n","import { z } from 'zod';\r\nimport { TileRequirementSchema } from './TileRequirementSchema';\r\nimport { ClimateEnumSchema } from './enums/ClimateEnumSchema';\r\n\r\nexport const BuildingRequirementsSchema = z.object({\r\n    fertility: TileRequirementSchema.optional(),\r\n    forest: TileRequirementSchema.optional(),\r\n    climate: ClimateEnumSchema.optional()\r\n});\r\n\r\nexport type BuildingRequirementsType = z.infer<typeof BuildingRequirementsSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TileRequirementSchema = z.object({\r\n    min: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    max: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type TileRequirementType = z.infer<typeof TileRequirementSchema>;\r\n","import { z } from 'zod';\r\nimport { BuildingConstructionSchema } from './BuildingConstructionSchema';\r\nimport { DeliveryCostSchema } from './DeliveryCostSchema';\r\nimport { LocationSchema } from './LocationSchema';\r\nimport { ProducerSchema } from './ProducerSchema';\r\nimport { BuildingStorageSchema } from './BuildingStorageSchema';\r\nimport { BuildingUpgradeTypeEnumSchema } from './enums/BuildingUpgradeTypeEnumSchema';\r\nimport {BuildingTypeEnumSchema} from \"./enums/BuildingTypeEnumSchema\";\r\n\r\nexport const BuildingSchema = z.object({\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    construction: BuildingConstructionSchema.optional().nullable(),\r\n    delivery_cost: DeliveryCostSchema.optional(),\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    land: z.array(LocationSchema).optional(),\r\n    location: LocationSchema.optional(),\r\n    name: z.string().optional(),\r\n    owner_id: z.string().optional(),\r\n    producer: ProducerSchema.optional(),\r\n    provider_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    size: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    storage: BuildingStorageSchema.optional(),\r\n    sublocation: LocationSchema.optional(),\r\n    town_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    type: BuildingTypeEnumSchema,\r\n    upgrades: z.array(BuildingUpgradeTypeEnumSchema).optional()\r\n});\r\n\r\nexport type BuildingType = z.infer<typeof BuildingSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const LocationSchema = z.object({\r\n    x: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    y: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])\r\n});\r\n\r\nexport type LocationType = z.infer<typeof LocationSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\nimport { OperationSchema } from './OperationSchema';\r\nimport { RecipeEnumSchema } from './enums/RecipeEnumSchema';\r\n\r\nexport const ProducerSchema = z.object({\r\n    inventory: InventorySchema,\r\n    limited: z.boolean(),\r\n    manager: z.string(),\r\n    previous_operation: OperationSchema,\r\n    provider_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    recipe: RecipeEnumSchema,\r\n    reference: z.string(),\r\n    target: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type ProducerType = z.infer<typeof ProducerSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\n\r\nexport const BuildingStorageSchema = z.object({\r\n    inventory: InventorySchema,\r\n    operations: z.array(z.string()),\r\n    reference: z.string()\r\n});\r\n\r\nexport type BuildingStorageType = z.infer<typeof BuildingStorageSchema>;\r\n","import { z } from 'zod';\r\nimport { BuildingTypeEnumSchema } from './enums/BuildingTypeEnumSchema';\r\nimport { BuildingRequirementsSchema } from './BuildingRequirementsSchema';\r\nimport { BuildingConstructionSchema } from './BuildingConstructionSchema';\r\nimport { BuildingUpgradeSchema } from './BuildingUpgradeSchema';\r\n\r\nexport const BuildingTypeSchema = z.object({\r\n    type: BuildingTypeEnumSchema,\r\n    supports_boost: z.boolean().optional().default(false),\r\n    requires: BuildingRequirementsSchema,\r\n    construction: BuildingConstructionSchema.optional(),\r\n    upgrades: z.array(BuildingUpgradeSchema).optional().default([])\r\n});\r\n\r\nexport type BuildingTypeType = z.infer<typeof BuildingTypeSchema>;\r\n","import { z } from 'zod';\r\nimport { BuildingUpgradeTypeEnumSchema } from './enums/BuildingUpgradeTypeEnumSchema';\r\nimport { BuildingConstructionSchema } from './BuildingConstructionSchema';\r\n\r\nexport const BuildingUpgradeSchema = z.object({\r\n    type: BuildingUpgradeTypeEnumSchema,\r\n    construction: BuildingConstructionSchema\r\n});\r\n\r\nexport type BuildingUpgradeType = z.infer<typeof BuildingUpgradeSchema>;\r\n","import { z } from 'zod';\r\nimport { BuildingTypeEnumSchema } from './enums/BuildingTypeEnumSchema';\r\n\r\nexport const BusinessBuildingSchema = z.object({\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    type: BuildingTypeEnumSchema\r\n});\r\n\r\nexport type BusinessBuildingType = z.infer<typeof BusinessBuildingSchema>;\r\n","import { z } from 'zod';\r\nimport { AccountSchema } from './AccountSchema';\r\nimport { BuildingSchema } from './BuildingSchema';\r\n\r\nexport const BusinessSchema = z.object({\r\n    account: AccountSchema,\r\n    account_id: z.string(),\r\n    building_ids: z.array(z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])).optional(),\r\n    buildings: z.array(BuildingSchema).optional(),\r\n    contract_ids: z.array(z.string()).optional().nullable(),\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    name: z.string(),\r\n    owner_id: z.string(),\r\n    transport_ids: z.array(z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])).optional().nullable()\r\n});\r\n\r\nexport type BusinessType = z.infer<typeof BusinessSchema>;\r\n","import { z } from 'zod';\r\nimport { TownDemandCategorySchema } from './TownDemandCategorySchema';\r\n\r\nexport const CommonersSchema = z.object({\r\n    account_id: z.string(),\r\n    count: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    migration: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    sustenance: z.array(TownDemandCategorySchema)\r\n});\r\n\r\nexport type CommonersType = z.infer<typeof CommonersSchema>;\r\n","import { z } from 'zod';\r\nimport { TownDemandSchema } from './TownDemandSchema';\r\n\r\n\r\nexport const TownDemandCategorySchema = z.object({\r\n    name: z.string(),\r\n    products: z.array(TownDemandSchema)\r\n});\r\n\r\nexport type TownDemandCategoryType = z.infer<typeof TownDemandCategorySchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\n\r\nexport const TownDemandSchema = z.object({\r\n    product: ItemEnumSchema,\r\n    bonus: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).default(String(0.0)),\r\n    desire: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).default(String(0.0)),\r\n    request: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).default(String(0.0)),\r\n    result: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).default(String(0.0))\r\n});\r\n\r\nexport type TownDemandType = z.infer<typeof TownDemandSchema>;\r\n","import { z } from 'zod';\r\nimport { PrestigeImpactSchema } from './PrestigeImpactSchema';\r\nimport { WorkerSchema } from './WorkerSchema';\r\nimport { SustenanceSchema } from \"./SustenanceSchema\";\r\n\r\n\r\nexport const HouseholdSchema = z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    town_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    portrait: z.string(),\r\n    gender: z.string(),\r\n    account_id: z.string(),\r\n    business_ids: z.array(z.string()),\r\n    prestige: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    prestige_impacts: z.array(PrestigeImpactSchema).optional(),\r\n    workers: z.array(WorkerSchema),\r\n    operations: z.array(z.string()),\r\n    caps: z.record(z.string(), z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])),\r\n    sustenance: SustenanceSchema,\r\n});\r\n\r\nexport type HouseholdType = z.infer<typeof HouseholdSchema>;\r\n","import { z } from 'zod';\r\n\r\n\r\nexport const PrestigeImpactSchema = z.object({\r\n    factor: z.string(),\r\n    impact: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n});\r\n\r\nexport type PrestigeImpactType = z.infer<typeof PrestigeImpactSchema>;\r\n","import { z } from 'zod';\r\nimport { SkillEnumSchema } from './enums/SkillEnumSchema';\r\n\r\nexport const WorkerSchema = z.object({\r\n    assignment: z.string(),\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    name: z.string(),\r\n    skills: z.record(SkillEnumSchema, z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])),\r\n});\r\n\r\nexport type WorkerType = z.infer<typeof WorkerSchema>;","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\n\r\nexport const SustenanceSchema = z.object({\r\n    reference: z.string(),\r\n    inventory: InventorySchema,\r\n    provider_id: z.string().optional(),\r\n});\r\n\r\nexport type SustenanceType = z.infer<typeof SustenanceSchema>;","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\nexport const IngredientSchema = z.object({\r\n    product: ItemEnumSchema,\r\n    amount: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])\r\n});\r\n\r\nexport type IngredientType = z.infer<typeof IngredientSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemOrderSchema = z.object({\r\n    volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])\r\n});\r\n\r\nexport type ItemOrderType = z.infer<typeof ItemOrderSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemPriceSchema = z.object({\r\n    low: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    typical: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    high: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type ItemPriceType = z.infer<typeof ItemPriceSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\nimport { ItemTypeEnumSchema } from './enums/ItemTypeEnumSchema';\r\nimport { SkillEnumSchema } from './enums/SkillEnumSchema';\r\nimport { ItemPriceSchema } from './ItemPriceSchema';\r\n\r\nexport const ItemSchema = z.object({\r\n    name: ItemEnumSchema,\r\n    type: ItemTypeEnumSchema,\r\n    unit: z.string(),\r\n    weight: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    tier: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    classes: z.array(SkillEnumSchema).optional().default([]),\r\n    price: ItemPriceSchema\r\n});\r\n\r\nexport type ItemType = z.infer<typeof ItemSchema>;\r\n","import { z } from 'zod';\r\nimport { ItemTradeSettlementSchema } from './ItemTradeSettlementSchema';\r\n\r\nexport const ItemTradeResultSchema = z.object({\r\n    settlements: z.array(ItemTradeSettlementSchema).optional(),\r\n    order_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    embedded: z.record(z.string(), z.any()).optional().default({})\r\n});\r\n\r\nexport type ItemTradeResultType = z.infer<typeof ItemTradeResultSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemTradeSettlementSchema = z.object({\r\n    volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])\r\n});\r\n\r\nexport type ItemTradeSettlementType = z.infer<typeof ItemTradeSettlementSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const ItemTradeSchema = z.object({\r\n    direction: z.string(),\r\n    expected_balance: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    operation: z.string(),\r\n    price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])\r\n});\r\n\r\nexport type ItemTradeType = z.infer<typeof ItemTradeSchema>;\r\n","import { z } from 'zod';\r\nimport { MarketItemSchema } from './MarketItemSchema';\r\nimport { ItemOrderSchema } from './ItemOrderSchema';\r\nimport {ItemEnumSchema} from \"./enums/ItemEnumSchema\";\r\n\r\nexport const MarketItemDetailsSchema = z.object({\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    product: ItemEnumSchema,\r\n    asset: ItemEnumSchema,\r\n    currency: z.string(),\r\n    bids: z.array(ItemOrderSchema),\r\n    asks: z.array(ItemOrderSchema),\r\n    data: MarketItemSchema\r\n});\r\n\r\nexport type MarketItemDetailsType = z.infer<typeof MarketItemDetailsSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const MarketItemSchema = z.object({\r\n    price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    last_price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    average_price: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    moving_average: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    highest_bid: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    lowest_ask: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    volume_prev_12: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0)),\r\n    bid_volume_10: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0)),\r\n    ask_volume_10: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0))\r\n});\r\n\r\nexport type MarketItemType = z.infer<typeof MarketItemSchema>;\r\n","import { z } from 'zod';\r\nimport { MarketItemSchema } from './MarketItemSchema';\r\nimport {ItemEnumSchema} from \"./enums/ItemEnumSchema\";\r\n\r\nexport const MarketSchema = z.object({\r\n    markets: z.record(ItemEnumSchema, MarketItemSchema),\r\n    _ts: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).describe('_ts')\r\n});\r\n\r\nexport type MarketType = z.infer<typeof MarketSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const NotificationSettingsSchema = z.object({\r\n    discord: z.boolean(),\r\n    mutes: z.nullable(z.array(z.string())).optional().default([]),\r\n});\r\n\r\nexport type NotificationSettingsType = z.infer<typeof NotificationSettingsSchema>;","import { z } from 'zod';\r\n\r\nexport const PathSchema = z.object({\r\n    x: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    y: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    c: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])\r\n});\r\n\r\nexport type PathType = z.infer<typeof PathSchema>;\r\n","import { z } from 'zod';\r\nimport { HouseholdSchema } from './HouseholdSchema';\r\nimport { SettingsSchema } from './SettingsSchema';\r\n\r\nexport const PlayerSchema = z.object({\r\n    username: z.string(),\r\n    household: HouseholdSchema,\r\n    discord_id: z.string().optional(),\r\n    settings: SettingsSchema,\r\n    active: z.boolean()\r\n});\r\n\r\nexport type PlayerType = z.infer<typeof PlayerSchema>;\r\n","import { z } from 'zod';\r\nimport { NotificationSettingsSchema } from './NotificationSettingsSchema';\r\n\r\nexport const SettingsSchema = z.object({\r\n    sound_volume: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    notifications: NotificationSettingsSchema,\r\n    commoners_splash: z.boolean(),\r\n    construction_splash: z.boolean(),\r\n    land_purchase_splash: z.boolean(),\r\n    operations_splash: z.boolean(),\r\n    production_splash: z.boolean(),\r\n    recipes_splash: z.boolean(),\r\n    sustenance_splash: z.boolean(),\r\n    trading_splash: z.boolean(),\r\n    trade_config_splash: z.boolean(),\r\n    welcome_splash: z.boolean(),\r\n    first_building_splash: z.boolean(),\r\n    warehouse_splash: z.boolean(),\r\n});\r\n\r\nexport type SettingsType = z.infer<typeof SettingsSchema>;","import { z } from 'zod';\r\nimport { RecipeEnumSchema } from './enums/RecipeEnumSchema';\r\nimport { BuildingTypeEnumSchema } from './enums/BuildingTypeEnumSchema';\r\nimport { SkillEnumSchema } from './enums/SkillEnumSchema';\r\nimport { IngredientSchema } from './IngredientSchema';\r\n\r\nexport const RecipeSchema = z.object({\r\n    name: RecipeEnumSchema,\r\n    tier: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    building: BuildingTypeEnumSchema,\r\n    size: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    product_class: SkillEnumSchema.optional().describe('class'),\r\n    points: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    inputs: z.array(IngredientSchema).optional().default([]),\r\n    outputs: z.array(IngredientSchema).optional().default([])\r\n});\r\n\r\nexport type RecipeType = z.infer<typeof RecipeSchema>;\r\n","import { z } from 'zod';\r\nimport { LocationSchema } from './LocationSchema';\r\n\r\nexport const RegionSchema = z.object({\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    name: z.string(),\r\n    description: z.string().optional(),\r\n    center: LocationSchema.optional(),\r\n    size: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type RegionType = z.infer<typeof RegionSchema>;\r\n","import { z } from 'zod';\r\nimport { BuildingTypeEnumSchema } from './enums/BuildingTypeEnumSchema';\r\n\r\nexport const StructureSchema = z.object({\r\n    id: z.string(),\r\n    type: BuildingTypeEnumSchema,\r\n    tags: z.array(z.string()).optional()\r\n});\r\n\r\nexport type StructureType = z.infer<typeof StructureSchema>;\r\n","import { z } from 'zod';\r\nimport { StructureSchema } from './StructureSchema';\r\n\r\n\r\nexport const TileSchema = z.object({\r\n    owner_id: z.string().optional(),\r\n    structure: StructureSchema.optional(),\r\n    ask_price: z.string().optional()\r\n});\r\n\r\nexport type TileType = z.infer<typeof TileSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TownChurchSchema = z.object({\r\n    project_ids: z.array(z.string()).optional().nullable()\r\n});\r\n\r\nexport type TownChurchType = z.infer<typeof TownChurchSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TownCultureSchema = z.object({\r\n    special_market_pressure: z.record(z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]), z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])).optional()\r\n});\r\n\r\nexport type TownCultureType = z.infer<typeof TownCultureSchema>;\r\n","import { z } from 'zod';\r\nimport { LocationSchema } from './LocationSchema';\r\nimport { TileSchema } from './TileSchema';\r\nimport { CommonersSchema } from './CommonersSchema';\r\nimport { TownGovernmentSchema } from './TownGovernmentSchema';\r\nimport { TownChurchSchema } from './TownChurchSchema';\r\nimport {TownCultureSchema, TownCultureType} from './TownCultureSchema';\r\n\r\nexport const TownDataSchema = z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    location: LocationSchema,\r\n    region: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    center_ids: z.array(z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])),\r\n    domain: z.record(z.string(), TileSchema),\r\n    household_ids: z.array(z.string()),\r\n    commoners: CommonersSchema,\r\n    government: TownGovernmentSchema,\r\n    church: TownChurchSchema,\r\n    navigation_zones: z.record(z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]), z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])),\r\n    culture: TownCultureSchema\r\n});\r\n\r\nexport type TownDataType = z.infer<typeof TownDataSchema>;\r\n","import { z } from 'zod';\r\nimport { TownDemandSchema } from './TownDemandSchema';\r\nimport { TownGovernmentTaxesSchema } from './TownGovernmentTaxesSchema';\r\n\r\n\r\nexport const TownGovernmentSchema = z.object({\r\n    account_id: z.string(),\r\n    demands: z.array(TownDemandSchema),\r\n    taxes_collected: TownGovernmentTaxesSchema\r\n});\r\n\r\nexport type TownGovernmentType = z.infer<typeof TownGovernmentSchema>;\r\n","import { z } from 'zod';\r\n\r\n\r\nexport const TownGovernmentTaxesSchema = z.object({\r\n    land_tax: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    structure_tax: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0)),\r\n    ferry_fees: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional().default(String(0.0))\r\n});\r\n\r\nexport type TownGovernmentTaxesType = z.infer<typeof TownGovernmentTaxesSchema>;\r\n","import { z } from 'zod';\r\nimport { LocationSchema } from './LocationSchema';\r\n\r\n\r\nexport const TownSchema = z.object({\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    name: z.string(),\r\n    location: LocationSchema,\r\n    region: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    capital: z.boolean().default(false)\r\n});\r\n\r\nexport type TownType = z.infer<typeof TownSchema>;\r\n","import { z } from 'zod';\r\nimport { AccountSchema } from './AccountSchema';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\nimport { ManagerSchema } from './ManagerSchema';\r\nimport { FlowSchema } from './FlowSchema';\r\n\r\nexport const TradeRouteSchema = z.object({\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    reference: z.string(),\r\n    local_town: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    remote_town: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    reserved_import: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    reserved_export: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    distance: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    moves: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    provider_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    account_id: z.string(),\r\n    account: AccountSchema,\r\n    managers: z.record(ItemEnumSchema, ManagerSchema),\r\n    current_flows: z.record(ItemEnumSchema, FlowSchema),\r\n    previous_flows: z.record(ItemEnumSchema, FlowSchema)\r\n});\r\n\r\nexport type TradeRouteType = z.infer<typeof TradeRouteSchema>;\r\n","import { z } from 'zod';\r\nimport { InventorySchema } from './InventorySchema';\r\n\r\nexport const TransportCargoSchema = z.object({\r\n    reference: z.string(),\r\n    inventory: InventorySchema.optional()\r\n});\r\n\r\nexport type TransportCargoType = z.infer<typeof TransportCargoSchema>;\r\n","import { z } from 'zod';\r\nimport { PathSchema } from './PathSchema';\r\n\r\nexport const TransportJourneyLegSchema = z.object({\r\n    path: z.array(PathSchema)\r\n});\r\n\r\nexport type TransportJourneyLegType = z.infer<typeof TransportJourneyLegSchema>;\r\n","import { z } from 'zod';\r\nimport { TransportJourneyLegSchema } from './TransportJourneyLegSchema';\r\n\r\nexport const TransportJourneySchema = z.object({\r\n    category: z.string(),\r\n    start_town_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    distance: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    moves: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    legs: z.array(TransportJourneyLegSchema)\r\n});\r\n\r\nexport type TransportJourneyType = z.infer<typeof TransportJourneySchema>;\r\n","import { z } from 'zod';\r\nimport { TransportTypeSchema } from './TransportTypeSchema';\r\nimport { LocationSchema } from './LocationSchema';\r\nimport { InventorySchema } from './InventorySchema';\r\nimport { TransportCargoSchema } from './TransportCargoSchema';\r\nimport { OperationSchema } from './OperationSchema';\r\nimport { ProducerSchema } from './ProducerSchema';\r\nimport { TradeRouteSchema } from './TradeRouteSchema';\r\nimport { TransportJourneySchema } from './TransportJourneySchema';\r\nimport {TransportTypeEnum} from \"../models/enums/transportTypeEnum\";\r\nimport {TransportTypeEnumSchema} from \"./enums/TransportTypeEnumSchema\";\r\n\r\nexport const TransportSchema = z.object({\r\n    id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    reference: z.string(),\r\n    type: TransportTypeEnumSchema,\r\n    size: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    name: z.string(),\r\n    owner_id: z.string(),\r\n    hometown_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    location: LocationSchema,\r\n    domain: z.array(LocationSchema).optional(),\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    fish_quantity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    inventory: InventorySchema,\r\n    cargo: TransportCargoSchema.optional(),\r\n    previous_operations: OperationSchema.optional(),\r\n    provider_id: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    producer: ProducerSchema.optional(),\r\n    route: TradeRouteSchema.optional(),\r\n    journey: TransportJourneySchema\r\n});\r\n\r\nexport type TransportType = z.infer<typeof TransportSchema>;\r\n","import { z } from 'zod';\r\nimport { TransportTypeEnumSchema } from './enums/TransportTypeEnumSchema';\r\nimport { ItemEnumSchema } from './enums/ItemEnumSchema';\r\n\r\nexport const TransportTypeSchema = z.object({\r\n    type: TransportTypeEnumSchema,\r\n    category: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    tier: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    capacity: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    speed: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    journey_duration: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    effective_days: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional(),\r\n    operating_costs: z.record(ItemEnumSchema, z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()])),\r\n    catches: z.string().optional(),\r\n    fishing_range: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type TransportTypeType = z.infer<typeof TransportTypeSchema>;\r\n","import { z } from 'zod';\r\n\r\nexport const TurnSchema = z.object({\r\n    turn: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]),\r\n    month: z.string().optional(),\r\n    year: z.union([z.string().transform(v => /\\./.test(String(v)) ? parseFloat(String(v)) : parseInt(String(v), 10)), z.number()]).optional()\r\n});\r\n\r\nexport type TurnType = z.infer<typeof TurnSchema>;\r\n","import { BaseModel } from './baseModel';\r\nimport { AccountSchema, AccountType } from '../schema';\r\nimport { AccountAssetSchema, AccountAssetType } from '../schema';\r\nimport { ItemEnumType } from '../schema/enums';\r\n\r\n/**\r\n * Represents an account with associated assets.\r\n */\r\nexport class Account extends BaseModel implements AccountType {\r\n    static schema = AccountSchema;\r\n\r\n    assets: Partial<Record<ItemEnumType, AccountAsset>>;\r\n    id: string;\r\n    master_id: string | null;\r\n    name: string | null;\r\n    owner_id: string;\r\n    sponsor_id: string | null;\r\n\r\n    /**\r\n     * Creates an instance of Account.\r\n     * @param data - The data to initialize the account.\r\n     */\r\n    constructor(data: AccountType) {\r\n        super(data);\r\n    }\r\n\r\n    /**\r\n     * Returns a map of the account's assets.\r\n     */\r\n    get assetsMap(): Map<ItemEnumType, AccountAsset> {\r\n        return new Map(Object.entries(this.assets).map(([key, value]) => [key as ItemEnumType, value]));\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an asset within an account.\r\n */\r\nexport class AccountAsset extends BaseModel implements AccountAssetType {\r\n    static schema = AccountAssetSchema;\r\n\r\n    balance: number;\r\n    capacity: number | null;\r\n    purchase: number | null;\r\n    purchase_price: number | null;\r\n    reserved: number;\r\n    reserved_capacity: number | null;\r\n    sale: number | null;\r\n    sale_price: number | null;\r\n    unit_cost: number | null;\r\n\r\n    /**\r\n     * Checks if the asset has been purchased.\r\n     */\r\n    get purchased(): boolean {\r\n        return this.purchase !== null;\r\n    }\r\n\r\n    /**\r\n     * Checks if the asset has been sold.\r\n     */\r\n    get sold(): boolean {\r\n        return this.sale !== null;\r\n    }\r\n\r\n    /**\r\n     * Calculates the total purchase value of the asset.\r\n     */\r\n    get totalPurchase(): number {\r\n        return (this.purchase ?? 0) * (this.purchase_price ?? 0);\r\n    }\r\n\r\n    /**\r\n     * Calculates the total sale value of the asset.\r\n     */\r\n    get totalSale(): number {\r\n        return (this.sale ?? 0) * (this.sale_price ?? 0);\r\n    }\r\n\r\n    /**\r\n     * Calculates the total value of the asset based on its balance and unit cost.\r\n     */\r\n    get totalValue(): number {\r\n        return (this.balance ?? 0) * (this.unit_cost ?? 0);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { BuildingSchema, BuildingType as BuildingSchemaType } from '../schema';\r\nimport { BuildingConstructionSchema, BuildingConstructionType } from '../schema';\r\nimport { BuildingStorageSchema, BuildingStorageType } from '../schema';\r\nimport { BuildingOperationSchema, BuildingOperationType } from '../schema';\r\nimport { DeliveryCost } from './deliveryCost';\r\nimport { Producer } from './producer';\r\nimport { BuildingUpgradeTypeEnumType } from '../schema/enums';\r\nimport { Location } from './location';\r\nimport { BuildingTypeEnumType } from '../schema/enums';\r\nimport { ItemEnumType } from '../schema/enums';\r\nimport { Inventory } from './inventory';\r\nimport { Flow } from './flow';\r\nimport { Operation } from './operation';\r\nimport { BuildingTypeSchema, BuildingTypeType } from '../schema';\r\nimport { BuildingRequirementsType } from '../schema';\r\nimport { BuildingUpgradeType } from '../schema';\r\n\r\n/**\r\n * Represents a building with various attributes.\r\n */\r\nexport class Building extends BaseModel implements BuildingSchemaType {\r\n    static schema = BuildingSchema;\r\n\r\n    capacity: number | null;\r\n    construction: BuildingConstruction | null;\r\n    delivery_cost: DeliveryCost;\r\n    id: number;\r\n    land: Location[] | null;\r\n    name: string;\r\n    owner_id: string;\r\n    producer: Producer | null;\r\n    provider_id: number | null;\r\n    size: number | null;\r\n    storage: BuildingStorage | null;\r\n    sublocation: Location | null;\r\n    town_id: number;\r\n    type: BuildingTypeEnumType;\r\n    upgrades: BuildingUpgradeTypeEnumType[] | null;\r\n\r\n    /**\r\n     * Creates an instance of Building.\r\n     * @param data - The data to initialize the building.\r\n     */\r\n    constructor(data: BuildingSchemaType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the construction details of a building.\r\n */\r\nexport class BuildingConstruction extends BaseModel implements BuildingConstructionType {\r\n    static schema = BuildingConstructionSchema;\r\n\r\n    range: number | null;\r\n    size: number | null;\r\n    discount: number | null;\r\n    time: number;\r\n    materials: Record<ItemEnumType, number>;\r\n\r\n    /**\r\n     * Creates an instance of BuildingConstruction.\r\n     * @param data - The data to initialize the building construction.\r\n     */\r\n    constructor(data: BuildingConstructionType) {\r\n        super(data);\r\n    }\r\n\r\n    /**\r\n     * Returns a map of the materials required for construction.\r\n     */\r\n    get materialsMap(): Map<ItemEnumType, number> {\r\n        return new Map(Object.entries(this.materials).map(([key, value]) => [key as ItemEnumType, value]));\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the storage details of a building.\r\n */\r\nexport class BuildingStorage extends BaseModel implements BuildingStorageType {\r\n    static schema = BuildingStorageSchema;\r\n\r\n    inventory: Inventory;\r\n    operations: string[];\r\n    reference: string;\r\n\r\n    /**\r\n     * Creates an instance of BuildingStorage.\r\n     * @param data - The data to initialize the building storage.\r\n     */\r\n    constructor(data: BuildingStorageType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the operation details of a building.\r\n */\r\nexport class BuildingOperation extends BaseModel implements BuildingOperationType {\r\n    static schema = BuildingOperationSchema;\r\n\r\n    total_flow: Record<ItemEnumType, Flow> | null;\r\n    operations: Operation[] | null;\r\n\r\n    /**\r\n     * Creates an instance of BuildingOperation.\r\n     * @param data - The data to initialize the building operation.\r\n     */\r\n    constructor(data: BuildingOperationType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the type details of a building.\r\n */\r\nexport class BuildingType extends BaseModel implements BuildingTypeType {\r\n    static schema = BuildingTypeSchema;\r\n\r\n    type: BuildingTypeEnumType;\r\n    supports_boost: boolean;\r\n    requires: BuildingRequirementsType;\r\n    construction: BuildingConstructionType | null;\r\n    upgrades: BuildingUpgradeType[];\r\n\r\n    /**\r\n     * Creates an instance of BuildingType.\r\n     * @param data - The data to initialize the building type.\r\n     */\r\n    constructor(data: BuildingTypeType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { BusinessSchema, BusinessType } from '../schema';\r\nimport { BusinessBuildingSchema, BusinessBuildingType } from '../schema';\r\nimport { Account } from './account';\r\nimport { Building } from './building';\r\nimport { BuildingTypeEnumType } from '../schema/enums';\r\n\r\n/**\r\n * Represents a business with associated attributes.\r\n */\r\nexport class Business extends BaseModel implements BusinessType {\r\n    static schema = BusinessSchema;\r\n\r\n    account: Account;\r\n    account_id: string;\r\n    building_ids: number[];\r\n    buildings: Building[];\r\n    contract_ids: string[] | null;\r\n    id: number;\r\n    name: string;\r\n    owner_id: string;\r\n    transport_ids: number[] | null;\r\n\r\n    /**\r\n     * Creates an instance of Business.\r\n     * @param data - The data to initialize the business.\r\n     */\r\n    constructor(data: BusinessType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a building within a business.\r\n */\r\nexport class BusinessBuilding extends BaseModel implements BusinessBuildingType {\r\n    static schema = BusinessBuildingSchema;\r\n\r\n    id: number;\r\n    type: BuildingTypeEnumType;\r\n\r\n    /**\r\n     * Creates an instance of BusinessBuilding.\r\n     * @param data - The data to initialize the business building.\r\n     */\r\n    constructor(data: BusinessBuildingType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { TownDemandCategory, TownDemand } from './town';\r\nimport { CommonersSchema, CommonersType } from '../schema';\r\n\r\n/**\r\n * Represents the commoners in a town with their associated attributes.\r\n */\r\nexport class Commoners extends BaseModel implements CommonersType {\r\n    static schema = CommonersSchema;\r\n    account_id: string;\r\n    count: number;\r\n    migration: number;\r\n    sustenance: TownDemandCategory[];\r\n\r\n    /**\r\n     * Creates an instance of Commoners.\r\n     * @param data - The data to initialize the commoners.\r\n     */\r\n    constructor(data: CommonersType) {\r\n        super(data);\r\n    }\r\n\r\n    /**\r\n     * Returns the demands of the commoners by flattening the sustenance categories.\r\n     */\r\n    get demands(): TownDemand[] {\r\n        return this.sustenance.flatMap(category => category.products);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { DeliveryCostSchema, DeliveryCostType } from '../schema';\r\n\r\n/**\r\n * Represents the delivery cost with associated attributes.\r\n */\r\nexport class DeliveryCost extends BaseModel implements DeliveryCostType {\r\n    static schema = DeliveryCostSchema;\r\n\r\n    land_distance: number;\r\n    ferry_fee: number | null;\r\n\r\n    /**\r\n     * Creates an instance of DeliveryCost.\r\n     * @param data - The data to initialize the delivery cost.\r\n     */\r\n    constructor(data: DeliveryCostType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { FlowSchema, FlowType } from '../schema';\r\n\r\n/**\r\n * Represents the flow of resources with associated attributes.\r\n */\r\nexport class Flow extends BaseModel implements FlowType {\r\n    static schema = FlowSchema;\r\n\r\n    consumption: number;\r\n    expiration: number;\r\n    export: number | null;\r\n    imported: number | null;\r\n    production: number;\r\n    production_cost: number;\r\n    purchase: number | null;\r\n    purchase_cost: number;\r\n    resident: number | null;\r\n    sale: number | null;\r\n    sale_value: number;\r\n    shortfall: number;\r\n\r\n    /**\r\n     * Creates an instance of Flow.\r\n     * @param data - The data to initialize the flow.\r\n     */\r\n    constructor(data: FlowType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { InventorySchema, InventoryType } from '../schema';\r\nimport { Account, AccountAsset } from './account';\r\nimport { ItemEnumType } from \"../schema/enums\";\r\nimport { Manager } from \"./manager\";\r\nimport { Flow } from \"./flow\";\r\n\r\n/**\r\n * Represents the inventory with associated attributes.\r\n */\r\nexport class Inventory extends BaseModel implements InventoryType {\r\n    static schema = InventorySchema;\r\n\r\n    account: Account;\r\n    assets: AccountAsset[];\r\n    capacity: number;\r\n    managers: Record<ItemEnumType, Manager> | null;\r\n    previous_flows: Record<ItemEnumType, Flow> | null;\r\n    reserved: number | null;\r\n\r\n    /**\r\n     * Creates an instance of Inventory.\r\n     * @param data - The data to initialize the inventory.\r\n     */\r\n    constructor(data: InventoryType) {\r\n        super(data);\r\n    }\r\n\r\n    /**\r\n     * Returns a map of the items in the inventory.\r\n     */\r\n    get items(): Map<ItemEnumType, AccountAsset> {\r\n        return new Map(Object.entries(this.account.assets).map(([key, value]) => [key as ItemEnumType, value]));\r\n    }\r\n\r\n    /**\r\n     * Returns a map of the managers in the inventory.\r\n     */\r\n    get managersMap(): Map<ItemEnumType, Manager> {\r\n        console.log(\"Accessing managersMap\");\r\n        console.log(\"Managers: \", this.managers);\r\n        return new Map(Object.entries(this.managers).map(([key, value]) => [key as ItemEnumType, value]));\r\n    }\r\n\r\n    /**\r\n     * Returns a map of the previous flows in the inventory.\r\n     */\r\n    get previousFlowsMap(): Map<ItemEnumType, Flow> {\r\n        return new Map(Object.entries(this.previous_flows).map(([key, value]) => [key as ItemEnumType, value]));\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { ItemSchema, ItemType } from '../schema';\r\nimport { ItemEnumType } from \"../schema/enums\";\r\nimport { ItemTypeEnumType } from \"../schema/enums\";\r\nimport { SkillEnumType } from \"../schema/enums\";\r\nimport { ItemPriceType } from \"../schema\";\r\n\r\n/**\r\n * Represents an item with associated attributes.\r\n */\r\nexport class Item extends BaseModel implements ItemType {\r\n    static schema = ItemSchema;\r\n\r\n    name: ItemEnumType;\r\n    type: ItemTypeEnumType;\r\n    unit: string;\r\n    weight: number | null;\r\n    tier: number;\r\n    classes: SkillEnumType[];\r\n    price: ItemPriceType;\r\n\r\n    /**\r\n     * Creates an instance of Item.\r\n     * @param data - The data to initialize the item.\r\n     */\r\n    constructor(data: ItemType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { ItemTradeSchema, ItemTradeType } from '../schema';\r\nimport { ItemTradeResultSchema, ItemTradeResultType } from \"../schema\";\r\nimport { ItemTradeSettlementSchema, ItemTradeSettlementType } from \"../schema\";\r\n\r\n/**\r\n * Represents an item trade with associated attributes.\r\n */\r\nexport class ItemTrade extends BaseModel implements ItemTradeType {\r\n    static schema = ItemTradeSchema;\r\n\r\n    direction: string;\r\n    expected_balance: number;\r\n    operation: string;\r\n    price: number;\r\n    volume: number;\r\n\r\n    /**\r\n     * Creates an instance of ItemTrade.\r\n     * @param data - The data to initialize the item trade.\r\n     */\r\n    constructor(data: ItemTradeType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the result of an item trade with associated attributes.\r\n */\r\nexport class ItemTradeResult extends BaseModel implements ItemTradeResultType {\r\n    static schema = ItemTradeResultSchema;\r\n\r\n    settlements: ItemTradeSettlement[] | null;\r\n    order_id: number | null;\r\n    embedded: Record<string, any>;\r\n\r\n    /**\r\n     * Creates an instance of ItemTradeResult.\r\n     * @param data - The data to initialize the item trade result.\r\n     */\r\n    constructor(data: ItemTradeResultType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the settlement details of an item trade with associated attributes.\r\n */\r\nexport class ItemTradeSettlement extends BaseModel implements ItemTradeSettlementType {\r\n    static schema = ItemTradeSettlementSchema;\r\n\r\n    volume: number;\r\n    price: number;\r\n\r\n    /**\r\n     * Creates an instance of ItemTradeSettlement.\r\n     * @param data - The data to initialize the item trade settlement.\r\n     */\r\n    constructor(data: ItemTradeSettlementType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { LocationSchema, LocationType } from '../schema';\r\nimport { BaseModel } from \"./baseModel\";\r\n\r\n/**\r\n * Represents a geographical location with coordinates.\r\n */\r\nexport class Location extends BaseModel implements LocationType {\r\n    static schema = LocationSchema;\r\n\r\n    x: number;\r\n    y: number;\r\n\r\n    /**\r\n     * Creates an instance of Location.\r\n     * @param data - The data to initialize the location.\r\n     */\r\n    constructor(data: LocationType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { ManagerSchema, ManagerType } from '../schema/ManagerSchema';\r\n\r\n/**\r\n * Represents a manager with associated attributes and operations.\r\n */\r\nexport class Manager extends BaseModel implements ManagerType {\r\n    static schema = ManagerSchema;\r\n\r\n    private _buyPrice: number | null;\r\n    private _buyVolume: number | null;\r\n    private _capacity: number | null;\r\n    private _maxHolding: number | null;\r\n    private _sellPrice: number | null;\r\n    private _sellVolume: number | null;\r\n\r\n    /**\r\n     * Creates an instance of Manager.\r\n     * @param data - The data to initialize the manager.\r\n     */\r\n    constructor(data: {\r\n        buyPrice?: number | null,\r\n        buyVolume?: number | null,\r\n        capacity?: number | null,\r\n        maxHolding?: number | null,\r\n        sellPrice?: number | null,\r\n        sellVolume?: number | null,\r\n    }) {\r\n        super(data);\r\n    }\r\n\r\n    get buyPrice(): number | null {\r\n        return this._buyPrice;\r\n    }\r\n\r\n    set buyPrice(value: number | null) {\r\n        this._buyPrice = value;\r\n    }\r\n\r\n    get buyVolume(): number | null {\r\n        return this._buyVolume;\r\n    }\r\n\r\n    set buyVolume(value: number | null) {\r\n        this._buyVolume = value;\r\n    }\r\n\r\n    get capacity(): number | null {\r\n        return this._capacity;\r\n    }\r\n\r\n    set capacity(value: number | null) {\r\n        this._capacity = value;\r\n    }\r\n\r\n    get maxHolding(): number | null {\r\n        return this._maxHolding;\r\n    }\r\n\r\n    set maxHolding(value: number | null) {\r\n        this._maxHolding = value;\r\n    }\r\n\r\n    get sellPrice(): number | null {\r\n        return this._sellPrice;\r\n    }\r\n\r\n    set sellPrice(value: number | null) {\r\n        this._sellPrice = value;\r\n    }\r\n\r\n    get sellVolume(): number | null {\r\n        return this._sellVolume;\r\n    }\r\n\r\n    set sellVolume(value: number | null) {\r\n        this._sellVolume = value;\r\n    }\r\n\r\n    /**\r\n     * Checks if the manager is currently buying.\r\n     */\r\n    get buying(): boolean {\r\n        return this.buyPrice !== null && this.buyVolume !== null;\r\n    }\r\n\r\n    /**\r\n     * Calculates the maximum buy price.\r\n     */\r\n    get maxBuyPrice(): number {\r\n        return (this.buyPrice ?? 0) * (this.buyVolume ?? 0);\r\n    }\r\n\r\n    /**\r\n     * Calculates the maximum sell price.\r\n     */\r\n    get maxSellPrice(): number {\r\n        return (this.sellPrice ?? 0) * (this.sellVolume ?? 0);\r\n    }\r\n\r\n    /**\r\n     * Checks if the manager is currently selling.\r\n     */\r\n    get selling(): boolean {\r\n        return this.sellPrice !== null && this.sellVolume !== null;\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { MarketSchema, MarketType } from '../schema';\r\nimport { MarketItemDetailsSchema, MarketItemDetailsType } from '../schema';\r\nimport { MarketItemSchema, MarketItemType } from \"../schema\";\r\nimport { ItemEnumType } from \"../schema/enums\";\r\nimport { ItemOrderType } from \"../schema\";\r\n\r\n/**\r\n * Represents the market with associated attributes.\r\n */\r\nexport class Market extends BaseModel implements MarketType {\r\n    static schema = MarketSchema;\r\n\r\n    markets: Record<ItemEnumType, MarketItem>;\r\n    _ts: number;\r\n\r\n    /**\r\n     * Creates an instance of Market.\r\n     * @param data - The data to initialize the market.\r\n     */\r\n    constructor(data: MarketType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a market item with associated attributes.\r\n */\r\nexport class MarketItem extends BaseModel implements MarketItemType {\r\n    static schema = MarketItemSchema;\r\n\r\n    price: number | null;\r\n    last_price: number | null;\r\n    average_price: number | null;\r\n    moving_average: number | null;\r\n    highest_bid: number | null;\r\n    lowest_ask: number | null;\r\n    volume: number;\r\n    volume_prev_12: number | null;\r\n    bid_volume_10: number | null;\r\n    ask_volume_10: number | null;\r\n\r\n    /**\r\n     * Creates an instance of MarketItem.\r\n     * @param data - The data to initialize the market item.\r\n     */\r\n    constructor(data: MarketItemType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents detailed information about a market item.\r\n */\r\nexport class MarketItemDetails extends BaseModel implements MarketItemDetailsType {\r\n    static schema = MarketItemDetailsSchema;\r\n\r\n    id: number;\r\n    product: ItemEnumType;\r\n    asset: ItemEnumType;\r\n    currency: string;\r\n    bids: ItemOrderType[];\r\n    asks: ItemOrderType[];\r\n    data: MarketItem;\r\n\r\n    /**\r\n     * Creates an instance of MarketItemDetails.\r\n     * @param data - The data to initialize the market item details.\r\n     */\r\n    constructor(data: MarketItemDetailsType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { OperationSchema, OperationType } from '../schema';\r\nimport { RecipeEnumType } from '../schema/enums';\r\nimport { DeliveryCost } from './deliveryCost';\r\nimport { Flow } from './flow';\r\nimport { ItemEnumType } from \"../schema/enums\";\r\n\r\n/**\r\n * Represents an operation with associated attributes and calculations.\r\n */\r\nexport class Operation extends BaseModel implements OperationType {\r\n    static schema = OperationSchema;\r\n\r\n    target: number | null;\r\n    production: number | null;\r\n    provision: number | null;\r\n    reference: string | null;\r\n    recipe: RecipeEnumType | null;\r\n    volume: number | null;\r\n    tax_rate: number | null;\r\n    tax: number | null;\r\n    delivery_cost: DeliveryCost | null;\r\n    flows: Record<ItemEnumType, Flow> | null;\r\n\r\n    /**\r\n     * Creates an instance of Operation.\r\n     * @param data - The data to initialize the operation.\r\n     */\r\n    constructor(data: OperationType) {\r\n        super(data);\r\n    }\r\n\r\n    /**\r\n     * Calculates the surplus of the operation.\r\n     */\r\n    get surplus(): number {\r\n        return (this.production || 0) - (this.target || 0);\r\n    }\r\n\r\n    /**\r\n     * Calculates the shortfall of the operation.\r\n     */\r\n    get shortfall(): number {\r\n        return (this.target || 0) - (this.production || 0);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { PathSchema, PathType } from '../schema';\r\n\r\n/**\r\n * Represents a path with associated coordinates and cost.\r\n */\r\nexport class Path extends BaseModel implements PathType {\r\n    static schema = PathSchema;\r\n\r\n    x: number;\r\n    y: number;\r\n    c: number;\r\n\r\n    /**\r\n     * Creates an instance of Path.\r\n     * @param data - The data to initialize the path.\r\n     */\r\n    constructor(data: PathType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { PlayerSchema, PlayerType } from '../schema';\r\nimport { HouseholdSchema, HouseholdType } from '../schema';\r\nimport { PrestigeImpactSchema, PrestigeImpactType } from '../schema';\r\nimport { WorkerSchema, WorkerType } from '../schema';\r\nimport { SustenanceSchema, SustenanceType } from '../schema';\r\nimport { SettingsSchema, SettingsType } from '../schema';\r\nimport { NotificationSettingsSchema, NotificationSettingsType } from '../schema';\r\nimport { SkillEnumType } from \"../schema/enums\";\r\nimport { Inventory } from \"./inventory\";\r\n\r\n/**\r\n * Represents a player with associated attributes.\r\n */\r\nexport class Player extends BaseModel implements PlayerType {\r\n    static schema = PlayerSchema;\r\n\r\n    username: string;\r\n    household: Household;\r\n    discord_id: string | null;\r\n    settings: Settings;\r\n    active: boolean;\r\n\r\n    /**\r\n     * Creates an instance of Player.\r\n     * @param data - The data to initialize the player.\r\n     */\r\n    constructor(data: PlayerType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a household with associated attributes.\r\n */\r\nexport class Household extends BaseModel implements HouseholdType {\r\n    static schema = HouseholdSchema;\r\n\r\n    id: string;\r\n    name: string;\r\n    town_id: number;\r\n    portrait: string;\r\n    gender: string;\r\n    account_id: string;\r\n    business_ids: string[];\r\n    prestige: number;\r\n    prestige_impacts: PrestigeImpact[] | null;\r\n    workers: Worker[];\r\n    operations: string[];\r\n    caps: Record<string, number>;\r\n    sustenance: Sustenance;\r\n\r\n    /**\r\n     * Creates an instance of Household.\r\n     * @param data - The data to initialize the household.\r\n     */\r\n    constructor(data: HouseholdType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a prestige impact with associated attributes.\r\n */\r\nexport class PrestigeImpact extends BaseModel implements PrestigeImpactType {\r\n    static schema = PrestigeImpactSchema;\r\n\r\n    factor: string;\r\n    impact: number;\r\n\r\n    /**\r\n     * Creates an instance of PrestigeImpact.\r\n     * @param data - The data to initialize the prestige impact.\r\n     */\r\n    constructor(data: PrestigeImpactType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a worker with associated attributes.\r\n */\r\nexport class Worker extends BaseModel implements WorkerType {\r\n    static schema = WorkerSchema;\r\n\r\n    assignment: string;\r\n    capacity: number;\r\n    name: string;\r\n    skills: Record<SkillEnumType, number>;\r\n\r\n    /**\r\n     * Creates an instance of Worker.\r\n     * @param data - The data to initialize the worker.\r\n     */\r\n    constructor(data: WorkerType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents sustenance with associated attributes.\r\n */\r\nexport class Sustenance extends BaseModel implements SustenanceType {\r\n    static schema = SustenanceSchema;\r\n\r\n    reference: string;\r\n    inventory: Inventory;\r\n    provider_id: string | null;\r\n\r\n    /**\r\n     * Creates an instance of Sustenance.\r\n     * @param data - The data to initialize the sustenance.\r\n     */\r\n    constructor(data: SustenanceType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents settings with associated attributes.\r\n */\r\nexport class Settings extends BaseModel implements SettingsType {\r\n    static schema = SettingsSchema;\r\n\r\n    sound_volume: number;\r\n    notifications: NotificationSettings;\r\n    commoners_splash: boolean;\r\n    construction_splash: boolean;\r\n    land_purchase_splash: boolean;\r\n    operations_splash: boolean;\r\n    production_splash: boolean;\r\n    recipes_splash: boolean;\r\n    sustenance_splash: boolean;\r\n    trading_splash: boolean;\r\n    trade_config_splash: boolean;\r\n    welcome_splash: boolean;\r\n    first_building_splash: boolean;\r\n    warehouse_splash: boolean;\r\n\r\n    /**\r\n     * Creates an instance of Settings.\r\n     * @param data - The data to initialize the settings.\r\n     */\r\n    constructor(data: SettingsType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents notification settings with associated attributes.\r\n */\r\nexport class NotificationSettings extends BaseModel implements NotificationSettingsType {\r\n    static schema = NotificationSettingsSchema;\r\n\r\n    discord: boolean;\r\n    mutes: string[] | null;\r\n\r\n    /**\r\n     * Creates an instance of NotificationSettings.\r\n     * @param data - The data to initialize the notification settings.\r\n     */\r\n    constructor(data: NotificationSettingsType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { ProducerSchema, ProducerType } from '../schema';\r\nimport { Inventory } from './inventory';\r\nimport { Operation } from './operation';\r\nimport { RecipeEnumType } from \"../schema/enums\";\r\n\r\n/**\r\n * Represents a producer with associated attributes.\r\n */\r\nexport class Producer extends BaseModel implements ProducerType {\r\n    static schema = ProducerSchema;\r\n\r\n    inventory: Inventory;\r\n    operation: Operation;\r\n    limited: boolean;\r\n    manager: string;\r\n    previous_operation: Operation;\r\n    provider_id: number | null;\r\n    recipe: RecipeEnumType;\r\n    reference: string;\r\n    target: number | null;\r\n\r\n    /**\r\n     * Creates an instance of Producer.\r\n     * @param data - The data to initialize the producer.\r\n     */\r\n    constructor(data: ProducerType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { RecipeSchema, RecipeType } from '../schema';\r\nimport { IngredientSchema, IngredientType } from '../schema';\r\nimport { RecipeEnumType } from \"../schema/enums\";\r\nimport { BuildingTypeEnumType } from \"../schema/enums\";\r\nimport { SkillEnumType } from \"../schema/enums\";\r\nimport { ItemEnumType } from \"../schema/enums\";\r\n\r\n/**\r\n * Represents a recipe for producing items with associated details.\r\n */\r\nexport class Recipe extends BaseModel implements RecipeType {\r\n    static schema = RecipeSchema;\r\n\r\n    name: RecipeEnumType;\r\n    tier: number;\r\n    building: BuildingTypeEnumType;\r\n    size: number;\r\n    product_class: SkillEnumType | null;\r\n    points: number | null;\r\n    inputs: Ingredient[];\r\n    outputs: Ingredient[];\r\n\r\n    /**\r\n     * Creates an instance of Recipe.\r\n     * @param data - The data to initialize the recipe.\r\n     */\r\n    constructor(data: RecipeType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents an ingredient used in a recipe.\r\n */\r\nexport class Ingredient extends BaseModel implements IngredientType {\r\n    static schema = IngredientSchema;\r\n\r\n    product: ItemEnumType;\r\n    amount: number;\r\n\r\n    /**\r\n     * Creates an instance of Ingredient.\r\n     * @param data - The data to initialize the ingredient.\r\n     */\r\n    constructor(data: IngredientType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { RegionSchema, RegionType } from '../schema';\r\nimport { Location } from \"./location\";\r\n\r\n/**\r\n * Represents a geographical region with associated attributes.\r\n */\r\nexport class Region extends BaseModel implements RegionType {\r\n    static schema = RegionSchema;\r\n\r\n    id: number;\r\n    name: string;\r\n    description: string | null;\r\n    center: Location | null;\r\n    size: number | null;\r\n\r\n    /**\r\n     * Creates an instance of Region.\r\n     * @param data - The data to initialize the region.\r\n     */\r\n    constructor(data: RegionType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { StructureSchema, StructureType } from '../schema';\r\nimport { BuildingTypeEnumType } from \"../schema/enums\";\r\n\r\n/**\r\n * Represents a structure with associated attributes.\r\n */\r\nexport class Structure extends BaseModel implements StructureType {\r\n    static schema = StructureSchema;\r\n\r\n    id: string;\r\n    type: BuildingTypeEnumType;\r\n    tags: string[] | null;\r\n\r\n    /**\r\n     * Creates an instance of Structure.\r\n     * @param data - The data to initialize the structure.\r\n     */\r\n    constructor(data: StructureType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { TileSchema, TileType } from '../schema/TileSchema';\r\nimport { Structure } from './structure';\r\n\r\n/**\r\n * Represents a tile with associated attributes.\r\n */\r\nexport class Tile extends BaseModel implements TileType {\r\n    static schema = TileSchema;\r\n\r\n    owner_id: string | null;\r\n    structure: Structure | null;\r\n    ask_price: string | null;\r\n\r\n    /**\r\n     * Creates an instance of Tile.\r\n     * @param data - The data to initialize the tile.\r\n     */\r\n    constructor(data: TileType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { TownSchema, TownType } from '../schema';\r\nimport { TownDataSchema, TownDataType } from '../schema';\r\nimport { TownDemandCategorySchema, TownDemandCategoryType } from \"../schema\";\r\nimport { TownDemandSchema, TownDemandType } from \"../schema\";\r\nimport { Location } from './location';\r\nimport { Commoners } from \"./commoners\";\r\nimport { TownGovernmentType } from \"../schema\";\r\nimport { TownChurchType } from \"../schema\";\r\nimport { TownCultureType } from \"../schema\";\r\nimport { Tile } from \"./tile\";\r\nimport { ItemEnumType } from \"../schema/enums\";\r\n\r\n/**\r\n * Represents a town with associated attributes.\r\n */\r\nexport class Town extends BaseModel implements TownType {\r\n    static schema = TownSchema;\r\n\r\n    id: number;\r\n    name: string;\r\n    location: Location;\r\n    region: number;\r\n    capital: boolean;\r\n\r\n    /**\r\n     * Creates an instance of Town.\r\n     * @param data - The data to initialize the town.\r\n     */\r\n    constructor(data: TownType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents detailed information about a town.\r\n */\r\nexport class TownData extends BaseModel implements TownDataType {\r\n    static schema = TownDataSchema;\r\n\r\n    id: string;\r\n    name: string;\r\n    location: Location;\r\n    region: number;\r\n    center_ids: number[];\r\n    domain: Record<string, Tile>;\r\n    household_ids: string[];\r\n    commoners: Commoners;\r\n    government: TownGovernmentType;\r\n    church: TownChurchType;\r\n    navigation_zones: Record<number, number>;\r\n    culture: TownCultureType;\r\n\r\n    /**\r\n     * Creates an instance of TownData.\r\n     * @param data - The data to initialize the town data.\r\n     */\r\n    constructor(data: TownDataType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a demand for a product in a town.\r\n */\r\nexport class TownDemand extends BaseModel implements TownDemandType {\r\n    static schema = TownDemandSchema;\r\n\r\n    product: ItemEnumType;\r\n    bonus: number;\r\n    desire: number;\r\n    request: number;\r\n    result: number;\r\n\r\n    /**\r\n     * Creates an instance of TownDemand.\r\n     * @param data - The data to initialize the town demand.\r\n     */\r\n    constructor(data: TownDemandType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a category of demands in a town.\r\n */\r\nexport class TownDemandCategory extends BaseModel implements TownDemandCategoryType {\r\n    static schema = TownDemandCategorySchema;\r\n\r\n    name: string;\r\n    products: TownDemand[];\r\n\r\n    /**\r\n     * Creates an instance of TownDemandCategory.\r\n     * @param data - The data to initialize the town demand category.\r\n     */\r\n    constructor(data: TownDemandCategoryType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { TransportSchema, TransportType as TransportSchemaType } from '../schema/TransportSchema';\r\nimport { TradeRouteSchema, TradeRouteType } from '../schema';\r\nimport { TransportCargoSchema, TransportCargoType } from '../schema';\r\nimport { TransportJourneySchema, TransportJourneyType } from '../schema';\r\nimport { TransportJourneyLegSchema, TransportJourneyLegType } from '../schema';\r\nimport { TransportTypeSchema, TransportTypeType } from \"../schema\";\r\nimport { Location } from './location';\r\nimport { Inventory } from \"./inventory\";\r\nimport { Operation } from \"./operation\";\r\nimport { Producer } from \"./producer\";\r\nimport { Account } from \"./account\";\r\nimport { ItemEnumType } from \"../schema/enums\";\r\nimport { Manager } from \"./manager\";\r\nimport { Flow } from \"./flow\";\r\nimport { Path } from \"./path\";\r\nimport { TransportTypeEnumType } from \"../schema/enums\";\r\n\r\n/**\r\n * Represents transport with associated attributes.\r\n */\r\nexport class Transport extends BaseModel implements TransportSchemaType {\r\n    static schema = TransportSchema;\r\n\r\n    id: number;\r\n    reference: string;\r\n    type: TransportTypeEnumType;\r\n    size: number;\r\n    name: string;\r\n    owner_id: string;\r\n    hometown_id: number;\r\n    location: Location;\r\n    domain: Location[] | null;\r\n    capacity: number;\r\n    fish_quantity: number | null;\r\n    inventory: Inventory;\r\n    cargo: TransportCargo | null;\r\n    previous_operations: Operation | null;\r\n    provider_id: number | null;\r\n    producer: Producer | null;\r\n    route: TradeRoute | null;\r\n    journey: TransportJourney;\r\n\r\n    /**\r\n     * Creates an instance of Transport.\r\n     * @param data - The data to initialize the transport.\r\n     */\r\n    constructor(data: TransportSchemaType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a trade route with associated attributes.\r\n */\r\nexport class TradeRoute extends BaseModel implements TradeRouteType {\r\n    static schema = TradeRouteSchema;\r\n\r\n    id: number;\r\n    reference: string;\r\n    local_town: number;\r\n    remote_town: number;\r\n    capacity: number;\r\n    reserved_import: number;\r\n    reserved_export: number;\r\n    distance: number;\r\n    moves: number;\r\n    provider_id: number;\r\n    account_id: string;\r\n    account: Account;\r\n    managers: Record<ItemEnumType, Manager>;\r\n    current_flows: Record<ItemEnumType, Flow>;\r\n    previous_flows: Record<ItemEnumType, Flow>;\r\n\r\n    /**\r\n     * Creates an instance of TradeRoute.\r\n     * @param data - The data to initialize the trade route.\r\n     */\r\n    constructor(data: TradeRouteType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the cargo of transport with associated attributes.\r\n */\r\nexport class TransportCargo extends BaseModel implements TransportCargoType {\r\n    static schema = TransportCargoSchema;\r\n\r\n    reference: string;\r\n    inventory: Inventory | null;\r\n\r\n    /**\r\n     * Creates an instance of TransportCargo.\r\n     * @param data - The data to initialize the transport cargo.\r\n     */\r\n    constructor(data: TransportCargoType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a transport journey with associated attributes.\r\n */\r\nexport class TransportJourney extends BaseModel implements TransportJourneyType {\r\n    static schema = TransportJourneySchema;\r\n\r\n    category: string;\r\n    start_town_id: number;\r\n    distance: number;\r\n    moves: number;\r\n    legs: TransportJourneyLeg[];\r\n\r\n    /**\r\n     * Creates an instance of TransportJourney.\r\n     * @param data - The data to initialize the transport journey.\r\n     */\r\n    constructor(data: TransportJourneyType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a leg of a transport journey with associated attributes.\r\n */\r\nexport class TransportJourneyLeg extends BaseModel implements TransportJourneyLegType {\r\n    static schema = TransportJourneyLegSchema;\r\n\r\n    path: Path[];\r\n\r\n    /**\r\n     * Creates an instance of TransportJourneyLeg.\r\n     * @param data - The data to initialize the transport journey leg.\r\n     */\r\n    constructor(data: TransportJourneyLegType) {\r\n        super(data);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a type of transport with associated attributes.\r\n */\r\nexport class TransportType extends BaseModel implements TransportTypeType {\r\n    static schema = TransportTypeSchema;\r\n\r\n    type: TransportTypeEnumType;\r\n    category: number;\r\n    tier: number;\r\n    capacity: number;\r\n    speed: number;\r\n    journey_duration: number | null;\r\n    effective_days: number | null;\r\n    operating_costs: Record<ItemEnumType, number>;\r\n    catches: string | null;\r\n    fishing_range: number | null;\r\n\r\n    /**\r\n     * Creates an instance of TransportType.\r\n     * @param data - The data to initialize the transport type.\r\n     */\r\n    constructor(data: TransportTypeType) {\r\n        super(data);\r\n    }\r\n}\r\n","import { BaseModel } from './baseModel';\r\nimport { TurnSchema, TurnType } from '../schema';\r\n\r\n/**\r\n * Represents a turn in the game with associated attributes.\r\n */\r\nexport class Turn extends BaseModel implements TurnType {\r\n    static schema = TurnSchema;\r\n\r\n    turn: number;\r\n    month: string | null;\r\n    year: number | null;\r\n\r\n    /**\r\n     * Creates an instance of Turn.\r\n     * @param data - The data to initialize the turn.\r\n     */\r\n    constructor(data: TurnType) {\r\n        super(data);\r\n    }\r\n}\r\n","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Turn } from '../models';\r\n\r\nclass TurnsAPI extends BaseAPI {\r\n    endpoint: string = apiRoutes.turn;\r\n\r\n    /**\r\n     * Get the current turn data.\r\n     * @returns The current turn data.\r\n     */\r\n    async get(): Promise<Turn> {\r\n        try {\r\n            const response = await super.get();\r\n            return Turn.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch turn data: ${(error as Error).message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TurnsAPI;\r\n","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Player } from '../models';\r\n\r\nclass PlayersAPI extends BaseAPI {\r\n    endpoint: string = apiRoutes.player;\r\n\r\n    async get(): Promise<Player> {\r\n        try {\r\n            const response = await super.get();\r\n            return Player.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch player data: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default PlayersAPI;\r\n","// utils/index.ts\r\n\r\nexport * from './conversion';\r\nexport * from './errors';","/**\r\n * Converts floats in an object to strings.\r\n *\r\n * @param obj - The object to convert.\r\n * @returns The object with floats converted to strings.\r\n */\r\nfunction convertFloatsToStrings(obj: any): any {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return obj;\r\n    }\r\n\r\n    const convertedObj: { [key: string]: any } = {};\r\n    for (const [key, value] of Object.entries(obj)) {\r\n        if (typeof value === 'object' && value !== null) {\r\n            convertedObj[key] = convertFloatsToStrings(value);\r\n        } else if (typeof value === 'number' && !Number.isInteger(value)) {\r\n            convertedObj[key] = value.toString();\r\n        } else {\r\n            convertedObj[key] = value;\r\n        }\r\n    }\r\n\r\n    return convertedObj;\r\n}\r\n\r\nexport {\r\n    convertFloatsToStrings,\r\n};\r\n","class TurnInProgressException extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'TurnInProgressException';\r\n    }\r\n}\r\n\r\nclass BuySellOrderFailedException extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'BuySellOrderFailedException';\r\n    }\r\n}\r\n\r\nclass SetManagerFailedException extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'SetManagerFailedException';\r\n    }\r\n}\r\n\r\nexport {\r\n    TurnInProgressException,\r\n    BuySellOrderFailedException,\r\n    SetManagerFailedException,\r\n};","import BaseAPI, {ResponseObject} from './baseAPI';\r\nimport {apiRoutes} from \"./api-routes\";\r\nimport {Town, TownData} from '../models/town';\r\nimport {Market, MarketItemDetails} from '../models/market';\r\nimport {ItemEnumType} from \"../schema/enums/ItemEnumSchema\";\r\nimport {ItemTrade, ItemTradeResult} from \"../models/itemTrade\";\r\nimport {BuySellOrderFailedException, convertFloatsToStrings} from '../utils'\r\n\r\nclass TownsAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.towns;\r\n\r\n    /**\r\n     * Get a list of all towns in the game.\r\n     * @returns A list of all towns in the game.\r\n     */\r\n    async getAll(): Promise<Town[]> {\r\n        try {\r\n            const response = await super.get() as unknown[];\r\n            return Town.validateArray(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch towns: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<TownData> {\r\n        try {\r\n            const response = await super.get({ endpoint: apiRoutes.townData, id });\r\n            return TownData.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch town data for ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async getTown(id: number): Promise<TownData> {\r\n        return await this.get({id});\r\n    }\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The data for the town.\r\n     */\r\n    async getTownData(id: number): Promise<TownData> {\r\n        return await this.get({id});\r\n    }\r\n\r\n    /**\r\n     * Get market data for a town.\r\n     * @param id - The ID of the town.\r\n     * @returns The market data for the town.\r\n     */\r\n    async getMarketData(id: number): Promise<Market> {\r\n        try {\r\n            const response = await super.get({ endpoint: apiRoutes.marketData, id });\r\n            return Market.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch market data for town ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the market overview for an item in a town.\r\n     * @param townId - The ID of the town.\r\n     * @param item - The item to get the overview for.\r\n     * @returns The market overview for the town.\r\n     */\r\n    async getMarketItem(townId: number, item: ItemEnumType): Promise<MarketItemDetails> {\r\n        try {\r\n            const response = await super.get( {endpoint: apiRoutes.marketItem, id: townId, item});\r\n            return MarketItemDetails.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch market item data for town ID ${townId} and item ${item}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async sendBuyOrder(\r\n        item: ItemEnumType,\r\n        id: number,\r\n        expectedBalance: number,\r\n        operation: string,\r\n        price: number,\r\n        volume: number\r\n    ): Promise<ItemTradeResult> {\r\n        return await this._sendOrder(\r\n            item, id, expectedBalance, operation, price, volume, \"bid\"\r\n        );\r\n    }\r\n\r\n    async sendSellOrder(\r\n        item: ItemEnumType,\r\n        id: number,\r\n        expectedBalance: number,\r\n        operation: string,\r\n        price: number,\r\n        volume: number\r\n    ): Promise<ItemTradeResult> {\r\n        return await this._sendOrder(\r\n            item, id, expectedBalance, operation, price, volume, \"ask\"\r\n        );\r\n    }\r\n\r\n    async _sendOrder(\r\n        item: ItemEnumType,\r\n        id: number,\r\n        expected_balance: number,\r\n        operation: string,\r\n        price: number,\r\n        volume: number,\r\n        direction: string\r\n    ): Promise<ItemTradeResult> {\r\n        const trade = new ItemTrade({\r\n            direction,\r\n            expected_balance,\r\n            operation,\r\n            price,\r\n            volume\r\n        });\r\n        const json = convertFloatsToStrings(trade);\r\n        const response: ResponseObject = await super.post({ endpoint: apiRoutes.orders, id, item, data: json });\r\n\r\n        if (response.status === 200) {\r\n            return await ItemTradeResult.validate(response);\r\n        } else {\r\n            throw new BuySellOrderFailedException(`Failed to send ${direction} order: ${response.statusText}`);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TownsAPI;","import BaseAPI from './baseAPI';\r\nimport { ResponseObject } from \"./baseAPI\";\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Building, BuildingOperation } from \"../models\";\r\nimport { Manager } from \"../models\";\r\nimport { SetManagerFailedException, convertFloatsToStrings } from \"../utils\";\r\nimport { pickBy } from 'lodash';\r\nimport * as _ from 'lodash';\r\nimport {ItemEnumType} from \"../schema/enums\";\r\n\r\nclass BuildingsAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.buildings;\r\n\r\n    /**\r\n     * Get data for a building.\r\n     * @param id - The ID of the building.\r\n     * @returns The data for the building.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<Building> {\r\n        try {\r\n            const response = await super.get({ id });\r\n            return Building.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch building with ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async getOperations(id: number): Promise<BuildingOperation> {\r\n        try {\r\n            const response: ResponseObject = await super.get({ endpoint: apiRoutes.buildingOperations, id });\r\n            if(response.status == 404) {\r\n                // Provide default values for BuildingOperation properties\r\n                return new BuildingOperation({\r\n                    total_flow: null,\r\n                    operations: null\r\n                });\r\n            }\r\n            return BuildingOperation.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch building with ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async setManager(id: number, item: ItemEnumType, manager: Manager): Promise<Building> {\r\n        try {\r\n            const json = convertFloatsToStrings(pickBy(manager, _.identity));\r\n            const response: ResponseObject = await super.patch({ endpoint: apiRoutes.buildingSetManager, id, item, data: json });\r\n            if(response.status && response.status == 200) {\r\n                return Building.validate(response.data['_embedded'][`/buildings/${id}`]);\r\n            }\r\n            else {\r\n                throw new SetManagerFailedException(`Failed to set manager for ${item} on building ${id}: ${response.statusText}`);\r\n            }\r\n        } catch (error) {\r\n            throw new SetManagerFailedException(`Failed to set manager for ${item} on building ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    async setProductionTargetMultiplier(id: number, target: number, autosetBuying: boolean = true, autosetSelling: boolean = true): Promise<boolean> {\r\n        const payload = { target, autoset_buying: autosetBuying, autoset_selling: autosetSelling };\r\n        const json = convertFloatsToStrings(payload);\r\n        const response: ResponseObject = await super.patch({ endpoint: apiRoutes.producer, id, data: json });\r\n        return response.status == 200;\r\n\r\n    }\r\n}\r\n\r\nexport default BuildingsAPI;","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport {Business} from \"../models\";\r\n\r\nclass BusinessesAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.business;\r\n\r\n    /**\r\n     Get a business by its ID.\r\n     * @param {number} id - The ID of the business.\r\n     * @returns The business with the given ID.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<Business> {\r\n        try {\r\n            const response = await super.get({ id });\r\n            return Business.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch business with ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default BusinessesAPI;","import BaseAPI from './baseAPI';\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport { Region } from '../models';\r\nimport { RegionType } from '../schema';\r\n\r\nclass RegionAPI extends BaseAPI {\r\n    endpoint: string = apiRoutes.regions;\r\n\r\n    /**\r\n     * Get a list of all regions in the game.\r\n     * @returns A list of all regions in the game.\r\n     */\r\n    async getAll(): Promise<RegionType[]> {\r\n        try {\r\n            const response = await super.get() as unknown[];\r\n            return response.map((regionData: unknown) => Region.validate(regionData) as RegionType);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch regions: ${(error as Error).message}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport default RegionAPI;\r\n","import axios, { AxiosInstance } from 'axios';\r\nimport BaseAPI from './baseAPI';\r\nimport Client from '../client';\r\nimport { staticUrl, rootUrl } from \"./api-routes\";\r\nimport {Building, BuildingType} from '../models'\r\nimport { LRUCache } from \"lru-cache\";\r\nimport { Item } from '../models';\r\nimport { Recipe } from '../models';\r\nimport {Transport, TransportType} from '../models';\r\n\r\nclass StaticAPI extends BaseAPI {\r\n    endpoint: string = staticUrl;\r\n    cache: LRUCache<string, object[]>;\r\n\r\n    constructor(client: Client) {\r\n        super(client);\r\n        this.cache = new LRUCache<string, object[]>({ max: 1 });\r\n    }\r\n\r\n    async getBuildings(): Promise<Building[]> {\r\n        const data = await this._get();\r\n        return data['Gm'].map(item => BuildingType.validate(item));\r\n    }\r\n\r\n    async getItems(): Promise<Item[]> {\r\n        const data = await this._get();\r\n        return data['RB'].map(item => Item.validate(item));\r\n    }\r\n\r\n    async getRecipes(): Promise<Recipe[]> {\r\n        const data = await this._get();\r\n        return data['F_'].map(item => Recipe.validate(item));\r\n    }\r\n\r\n    async getTransport(): Promise<Transport[]> {\r\n        const data = await this._get();\r\n        return data['g$'].map(item => TransportType.validate(item));\r\n    }\r\n\r\n    async _get(): Promise<object> {\r\n        if (this.cache.has('staticData')) {\r\n            return this.cache.get('staticData');\r\n        }\r\n\r\n        const response = await axios.get(rootUrl);\r\n        const pattern = /src=\"\\/static\\/js\\/(.*?)\">/;\r\n        const filename = response.data.match(pattern)[1];\r\n\r\n        const staticResponse = await axios.get(staticUrl + filename);\r\n        const jsonPattern = /JSON\\.parse\\('(.*?)'\\)/;\r\n        const jsonData = JSON.parse(staticResponse.data.match(jsonPattern)[1].replace(/\\\\/g, ''));\r\n\r\n        this.cache.set('staticData', jsonData);\r\n        return jsonData;\r\n    }\r\n}\r\n\r\nexport default StaticAPI;","import BaseAPI from './baseAPI';\r\nimport { ResponseObject } from \"./baseAPI\";\r\nimport { apiRoutes } from \"./api-routes\";\r\nimport {Transport, TradeRoute} from '../models';\r\nimport { Manager } from \"../models\";\r\nimport { SetManagerFailedException, convertFloatsToStrings } from \"../utils\";\r\nimport { pickBy } from 'lodash';\r\nimport * as _ from 'lodash';\r\nimport {ItemEnumType} from \"../schema/enums\";\r\n\r\nclass TransportsAPI extends BaseAPI {\r\n\r\n    endpoint: string = apiRoutes.transports;\r\n\r\n    /**\r\n     * Get data for a town.\r\n     * @param id - The ID of the transport.\r\n     * @returns The data for the transport.\r\n     */\r\n    async get({ id }: { endpoint?: string, id?: number, item?: string } = {}): Promise<Transport> {\r\n        try {\r\n            const response = await super.get({ id });\r\n            return Transport.validate(response);\r\n        } catch (error) {\r\n            throw new Error(`Failed to fetch town data for ID ${id}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the manager for the item.\r\n     * @param id - The ID of the transport.\r\n     * @param item - The item to set the manager for.\r\n     * @param manager - The manager to set.\r\n     * @returns The transport route with the manager set.\r\n     */\r\n    async setManager(id: number, item: ItemEnumType, manager: Manager): Promise<TradeRoute> {\r\n        const json = convertFloatsToStrings(pickBy(manager, _.identity));\r\n        const response: ResponseObject = await super.patch({ endpoint: apiRoutes.transportManager, id, item, data: json });\r\n        if (response.status == 200) {\r\n            return TradeRoute.validate(response);\r\n        } else {\r\n            throw new SetManagerFailedException(\r\n                `Failed to set manager for ${item} on transport ${id}: ${response.statusText}`\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default TransportsAPI;","import Client from '../client'\r\nimport { ItemEnumType } from \"../schema/enums\";\r\nimport { Commoners } from \"../models\";\r\nimport { Market, MarketItem, MarketItemDetails } from \"../models\";\r\nimport { Structure } from \"../models\";\r\nimport { TownData, TownDemand } from \"../models\";\r\nimport { ItemTradeResult } from \"../models\";\r\n\r\nexport class Town {\r\n    _client: Client;\r\n    _market: Market;\r\n    data: TownData;\r\n\r\n    constructor(client: Client, public id: number, data: TownData = null) {\r\n        this._client = client;\r\n        this.data = data;\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        this.data = await this._client.townsApi.getTown(this.id);\r\n        this._market = await this._client.townsApi.getMarketData(this.id);\r\n    }\r\n\r\n    get commoners(): Commoners {\r\n        return this.data!.commoners;\r\n    }\r\n\r\n    get demands(): TownDemand[] {\r\n        return this.data!.commoners.demands;\r\n    }\r\n\r\n    get market(): Record<ItemEnumType, MarketItem> {\r\n        return this._market.markets;\r\n    }\r\n\r\n    get name(): string {\r\n        return this.data!.name;\r\n    }\r\n\r\n    get structures(): {\r\n        [key: string]: Structure;\r\n    } {\r\n        const structures: {\r\n            [key: string]: Structure;\r\n        } = {};\r\n        for (const domain in this.data!.domain) {\r\n            if (this.data!.domain[domain].structure !== null) {\r\n                structures[domain] = this.data!.domain[domain].structure;\r\n            }\r\n        }\r\n        return structures;\r\n    }\r\n\r\n    get totalSatisfaction(): number {\r\n        const demands = this.data!.commoners.sustenance.flatMap((category) => category.products);\r\n        const desireTotal = demands.reduce((acc, demand) => acc + demand.desire, 0);\r\n        const resultTotal = demands.reduce((acc, demand) => acc + demand.result, 0);\r\n        return Math.ceil((resultTotal / desireTotal) * 100);\r\n    }\r\n\r\n    get totalStructures(): number {\r\n        return Object.values(this.data!.domain).filter((domain) => domain.structure !== null).length;\r\n    }\r\n\r\n    get totalTaxes(): number {\r\n        return Object.values(this.data!.government.taxes_collected).reduce((acc, value) => acc + value, 0);\r\n    }\r\n\r\n    async buy(item: ItemEnumType, expectedBalance: number, operation: string, volume: number, price: number): Promise<ItemTradeResult> {\r\n        return await this._client.townsApi.sendBuyOrder(item, this.id, expectedBalance, operation, price, volume);\r\n    }\r\n\r\n    async fetchMarketItem(item: ItemEnumType): Promise<MarketItemDetails> {\r\n        return await this._client.townsApi.getMarketItem(this.id, item);\r\n    }\r\n\r\n    item(item: ItemEnumType): MarketItem | null {\r\n        return this._market.markets[item];\r\n    }\r\n\r\n    async sell(item: ItemEnumType, expectedBalance: number, operation: string, volume: number, price: number): Promise<ItemTradeResult> {\r\n        return await this._client.townsApi.sendSellOrder(item, this.id, expectedBalance, operation, price, volume);\r\n    }\r\n}","import Client from \"../client\";\r\nimport {Ingredient, Recipe as RecipeModel} from \"../models/recipe\";\r\nimport {ItemEnumType} from \"../schema/enums\";\r\nimport {ItemEnum} from \"../models/enums\";\r\nimport {AccountAsset} from \"../models\";\r\nimport {Manager} from \"../models\";\r\nimport {RecipeEnumType} from \"../schema/enums\";\r\n\r\nexport class Recipe {\r\n    name: string;\r\n    data: RecipeModel;\r\n    _client: Client;\r\n\r\n    constructor(options: {\r\n        client: Client;\r\n        recipe?: RecipeModel;\r\n        recipeName?: RecipeEnumType;\r\n    }) {\r\n        this._client = options.client;\r\n        if (options.recipe) {\r\n            this.data = options.recipe;\r\n        }\r\n        if (options.recipeName) {\r\n            this.name = options.recipeName;\r\n        }\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        if(!this.data && this.name) {\r\n            const recipes = await this._client.staticApi.getRecipes();\r\n            for (const recipe of recipes) {\r\n                if (recipe.name === this.name) {\r\n                    this.data = recipe;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get inputs(): Map<ItemEnumType, Ingredient> {\r\n        const inputsMap = new Map<ItemEnumType, Ingredient>();\r\n        for (const ingredient of this.data.inputs) {\r\n            inputsMap.set(ingredient.product, ingredient);\r\n        }\r\n        return inputsMap;\r\n    }\r\n\r\n    get outputs(): Map<ItemEnumType, Ingredient> {\r\n        const outputsMap = new Map<ItemEnumType, Ingredient>();\r\n        for (const ingredient of this.data.outputs) {\r\n            outputsMap.set(ingredient.product, ingredient);\r\n        }\r\n        return outputsMap;\r\n    }\r\n\r\n    get labour(): number {\r\n        for (const inputIngredient of this.data.inputs) {\r\n            if (inputIngredient.product === ItemEnum.Labour) {\r\n                return inputIngredient.amount;\r\n            }\r\n        }\r\n        return 0.0;\r\n    }\r\n\r\n    calculateTargetLabor(\r\n        target: number,\r\n        inventoryAssets: { [key: string]: AccountAsset } = {},\r\n        inventoryManagers: { [key: string]: Manager } = {}\r\n    ): number {\r\n        for (const inputIngredient of this.data.inputs) {\r\n            if (inputIngredient.product === ItemEnum.Labour) {\r\n                continue;\r\n            }\r\n            const requiredAmount = inputIngredient.amount * target;\r\n            let availableAmount = 0;\r\n\r\n            const asset = inventoryAssets[inputIngredient.product];\r\n            if (asset) {\r\n                const manager = inventoryManagers[inputIngredient.product];\r\n                const buyVolume = manager ? manager.buyVolume : 0;\r\n                const capacity = asset.capacity || asset.balance + buyVolume;\r\n                availableAmount = Math.min(asset.balance - asset.reserved + buyVolume, capacity);\r\n            }\r\n\r\n            if (requiredAmount > availableAmount) {\r\n                target = Math.min(target, availableAmount / inputIngredient.amount);\r\n            }\r\n        }\r\n\r\n        return this.labour * target;\r\n    }\r\n}","import { Building as BuildingModel } from '../models/building';\r\nimport Client from \"../client\";\r\nimport { Player } from './player';\r\nimport {ItemEnumType} from \"../schema/enums\";\r\nimport {Manager} from \"../models\";\r\nimport {BuildingTypeEnumType} from \"../schema/enums\";\r\nimport {Recipe} from \"./recipe\";\r\nimport {AccountAsset} from \"../models\";\r\n\r\nexport class Building {\r\n    _client: Client;\r\n    _id: number;\r\n    id: number;\r\n    player: Player;\r\n    data: BuildingModel;\r\n\r\n    constructor(client: Client, player: Player, id: number) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this._id = id;\r\n        this.id = this._id;\r\n    }\r\n\r\n    async load() {\r\n        this.data = await this._client.buildingsApi.get({ id: this._id });\r\n    }\r\n\r\n    get buildingOperation() {\r\n        return this.player.operations.get(this._id) || null;\r\n    }\r\n\r\n    get flows() {\r\n        if (this.buildingOperation && this.buildingOperation.totalFlow) {\r\n            console.log(\"Giving total flow: \"+JSON.stringify(this.buildingOperation.totalFlow));\r\n            return this.buildingOperation.totalFlow;\r\n        } else if (this.operation) {\r\n            return this.operation.data.flows;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    get inventory() {\r\n        return this.data && this.data.storage ? this.data.storage.inventory : null;\r\n    }\r\n\r\n    get items() {\r\n        return this.data && this.data.storage ? new Map(Object.entries(this.data.storage.inventory.account.assets).map(([key, value]) => [key as ItemEnumType, value])) : null;\r\n    }\r\n\r\n    get producerItems() {\r\n        return this.data && this.data.producer ? new Map(Object.entries(this.data.producer.inventory.account.assets).map(([key, value]) => [key as ItemEnumType, value])) : null;\r\n    }\r\n\r\n    get operation() {\r\n        return this.operations && this.operations.length === 1 ? this.operations[0] : null;\r\n    }\r\n\r\n    get operations() {\r\n        return this.id in this.player.operations ? this.player.operations[this.id].operations : null;\r\n    }\r\n\r\n    get managers() {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.managers : {};\r\n    }\r\n\r\n    get previous_flows() {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.previous_flows : null;\r\n    }\r\n\r\n    get production() {\r\n        return this.data ? this.data.producer : null;\r\n    }\r\n\r\n    get productionFlows() {\r\n        return this.data && this.data.producer ? this.data.producer.inventory.previous_flows : null;\r\n    }\r\n\r\n    get size() {\r\n        return this.data ? this.data.size : null;\r\n    }\r\n\r\n    get targetProduction() {\r\n        return this.production && this.production.target ? this.production.target : 0.0;\r\n    }\r\n\r\n    get type() {\r\n        return this.data ? this.data.type : null;\r\n    }\r\n\r\n    get underConstruction() {\r\n        return this.data ? this.data.construction !== null : false;\r\n    }\r\n\r\n    get upgrades() {\r\n        return this.data ? this.data.upgrades : null;\r\n    }\r\n\r\n    async flow(item: ItemEnumType) {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.previous_flows[item] : null;\r\n    }\r\n\r\n    async item(item: ItemEnumType) {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.account.assets[item] : null;\r\n    }\r\n\r\n    async manager(item: ItemEnumType) {\r\n        return this.data && this.data.storage ? this.data.storage.inventory.managers[item] : null;\r\n    }\r\n\r\n    async patchManager(item: ItemEnumType, managerData: { [key: string]: any }) {\r\n        if (!this.data || !this.data.storage || !this.data.storage.inventory.managers[item]) {\r\n            throw new Error(`Item ${item} does not have a manager.`);\r\n        }\r\n\r\n        const manager = this.data.storage.inventory.managers[item];\r\n        for (const key in managerData) {\r\n            manager[key] = managerData[key];\r\n        }\r\n\r\n        const updatedObject = await this._client.buildingsApi.setManager(this.id, item, manager);\r\n        Object.assign(this, updatedObject);\r\n    }\r\n\r\n    async setManager(item: ItemEnumType, manager: Manager) {\r\n        const updatedObject = await this._client.buildingsApi.setManager(this.id, item, manager);\r\n        Object.assign(this, updatedObject);\r\n    }\r\n\r\n    async setTargetProduction(target: number, autoset_buying: boolean = true, autoset_selling: boolean = true) {\r\n        const updatedObject = await this._client.buildingsApi.setProductionTargetMultiplier(this.id, target, autoset_buying, autoset_selling);\r\n        Object.assign(this, updatedObject);\r\n    }\r\n\r\n    async calculateCurrentLaborNeed(): Promise<number> {\r\n        /* Calculates the current labor need based on the building's production recipe.\r\n        Returns:\r\n          number: The labor required for the target multiplier.\r\n        */\r\n        if (this.production) {\r\n            const recipe = new Recipe({ client: this._client, recipeName: this.production.recipe });\r\n            await recipe.load();\r\n            if (recipe) {\r\n                let inventoryAssets: Map<ItemEnumType, AccountAsset>;\r\n                if (this.items) {\r\n                    inventoryAssets = this.items;\r\n                } else if (this.data && this.data.producer) {\r\n                    inventoryAssets = this.producerItems;\r\n                }\r\n\r\n                let inventoryManagers: Map<ItemEnumType, Manager>;\r\n                if (this.data && this.data.storage) {\r\n                    inventoryManagers = this.data.storage.inventory.managersMap;\r\n                } else if (this.data && this.data.producer) {\r\n                    inventoryManagers = this.data.producer.inventory.managersMap;\r\n                }\r\n\r\n                return recipe.calculateTargetLabor(\r\n                    this.targetProduction,\r\n                    Object.fromEntries(inventoryAssets),\r\n                    Object.fromEntries(inventoryManagers)\r\n                );\r\n            }\r\n        }\r\n\r\n        return 0.0;\r\n    }\r\n\r\n}\r\n\r\nexport class BuildingsList extends Array<Building> {\r\n    byId(id: number) {\r\n        return this.find((building) => building.id === id);\r\n    }\r\n\r\n    byType(type: BuildingTypeEnumType) {\r\n        return new BuildingsList(...this.filter((building) => building.data.type === type));\r\n    }\r\n}","import { AccountAsset } from \"../models\";\r\nimport { Flow } from \"../models\";\r\nimport { ItemEnumType } from \"../schema/enums\";\r\nimport { Town } from './town';\r\nimport { Transport } from './transport';\r\nimport { Manager } from \"../models\";\r\n\r\nexport class Export {\r\n    asset: AccountAsset;\r\n    flow: Flow;\r\n    item: ItemEnumType;\r\n    manager: Manager;\r\n    town: Town;\r\n    transport: Transport;\r\n\r\n    constructor(asset: AccountAsset, flow: Flow, item: ItemEnumType, manager: Manager, town: Town, transport: Transport) {\r\n        this.asset = asset;\r\n        this.flow = flow;\r\n        this.item = item;\r\n        this.manager = manager;\r\n        this.town = town;\r\n        this.transport = transport;\r\n    }\r\n\r\n    get market_data() {\r\n        return this.town.market[this.item];\r\n    }\r\n\r\n    get flowed() {\r\n        return this.flow.export || 0;\r\n    }\r\n\r\n    get value() {\r\n        return this.manager.maxSellPrice;\r\n    }\r\n\r\n    get valueFlowed() {\r\n        if (!this.flowed) {\r\n            return 0.0;\r\n        }\r\n\r\n        return this.asset.sale * this.asset.sale_price;\r\n    }\r\n\r\n    get volume() {\r\n        return this.manager.sellVolume;\r\n    }\r\n\r\n    get volumeFlowed() {\r\n        return this.flow.export || 0;\r\n    }\r\n\r\n    async fetchMarketDetails() {\r\n        return await this.town.fetchMarketItem(this.item);\r\n    }\r\n\r\n    async sell(volume: number, price: number) {\r\n        await this.transport.sell(this.item, volume, price);\r\n    }\r\n\r\n    async patchManager(buyPrice?: number, buyVolume?: number, sellPrice?: number, sellVolume?: number) {\r\n        await this.transport.patchManager(this.item, buyPrice, buyVolume, sellPrice, sellVolume);\r\n    }\r\n}\r\n\r\nexport class Exports extends Object {\r\n    private data: { [key: string]: Export };\r\n\r\n    constructor(data: { [key: string]: Export }) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: ItemEnumType): Export | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: ItemEnumType, value: Export) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    get flowed() {\r\n        return new Exports(\r\n            Object.keys(this.data).filter((item) => this.data[item].flowed)\r\n                .reduce((acc, item) => ({ ...acc, [item]: this.data[item] }), {})\r\n        );\r\n    }\r\n    get value() {\r\n        return Object.values(this.data).reduce((acc, exp) => acc + exp.value, 0);\r\n    }\r\n    get valueFlowed() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exp) => acc + exp.valueFlowed,\r\n            0\r\n        );\r\n    }\r\n\r\n    get volume() {\r\n        return Object.values(this.data).reduce((acc, exp) => acc + exp.volume, 0);\r\n    }\r\n    get volumeFlowed() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exp) => acc + exp.volumeFlowed,\r\n            0\r\n        );\r\n    }\r\n}\r\n\r\nexport class ExportsList extends Array<Export> {\r\n    private data: Export[];\r\n\r\n    constructor(...items: Export[]) {\r\n        super(...items);\r\n    }\r\n    get flowed() {\r\n        return new ExportsList(...this.data.filter((exp) => exp.flowed));\r\n    }\r\n    get value() {\r\n        return this.data.reduce((acc, exp) => acc + exp.value, 0);\r\n    }\r\n    get valueFlowed() {\r\n        return this.data.reduce((acc, exp) => acc + exp.valueFlowed, 0);\r\n    }\r\n    get volume() {\r\n        return this.data.reduce((acc, exp) => acc + exp.volume, 0);\r\n    }\r\n    get volumeFlowed() {\r\n        return this.data.reduce((acc, exp) => acc + exp.volumeFlowed, 0);\r\n    }\r\n\r\n    byTownId(id: number) {\r\n        return new ExportsList(...this.data.filter((exp) => +exp.town.data.id === id));\r\n    }\r\n\r\n    byTownName(name: string) {\r\n        return new ExportsList(...this.data.filter((exp) => exp.town.data.name === name));\r\n    }\r\n\r\n}\r\n\r\nexport class ExportsSummed extends Object {\r\n    private data: { [key: string]: ExportsList };\r\n\r\n    constructor(data: { [key: string]: ExportsList } = {}) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: string): ExportsList | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: string, value: ExportsList) {\r\n        this.data[key] = value;\r\n    }\r\n    get flowed() {\r\n        return new ExportsSummed(\r\n            Object.keys(this.data).filter((item) =>\r\n                this.data[item].some((exp) => exp.flowed)\r\n            ).reduce((acc, item) => ({ ...acc, [item]: this.data[item] }), {})\r\n        );\r\n    }\r\n    get value() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exps) => acc + exps.reduce((acc, exp) => acc + exp.value, 0),\r\n            0\r\n        );\r\n    }\r\n    get valueFlowed() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exps) =>\r\n                acc + exps.reduce((acc, exp) => acc + exp.valueFlowed, 0),\r\n            0\r\n        );\r\n    }\r\n    get volume() {\r\n        return Object.values(this.data).reduce(\r\n            (acc, exps) => acc + exps.reduce((acc, exp) => acc + exp.volume, 0),\r\n            0\r\n        );\r\n    }\r\n    get volumeFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, exps) => {\r\n            return acc + exps.reduce((acc, exp) => acc + exp.volumeFlowed, 0);\r\n        }, 0);\r\n    }\r\n\r\n    byTownId(id: number): ExportsSummed {\r\n        const data = Object.entries(this.data).reduce((acc, [item, exps]) => {\r\n            if (+exps[0].town.data.id === id) {\r\n                acc[item] = exps;\r\n            }\r\n            return acc;\r\n        }, {});\r\n        return new ExportsSummed(data);\r\n    }\r\n\r\n    byTownName(name: string): ExportsSummed {\r\n        const data = Object.entries(this.data).reduce((acc, [item, exps]) => {\r\n            if (exps[0].town.data.name === name) {\r\n                acc[item] = exps;\r\n            }\r\n            return acc;\r\n        }, {});\r\n        return new ExportsSummed(data);\r\n    }\r\n}","// imports.ts\r\nimport { Town } from './town';\r\nimport { Transport } from './transport';\r\nimport {AccountAsset} from \"../models\";\r\nimport {Flow} from \"../models\";\r\nimport {ItemEnumType} from \"../schema/enums\";\r\nimport {Manager} from \"../models\";\r\n\r\nexport class Import {\r\n    asset: AccountAsset\r\n    flow: Flow\r\n    item: ItemEnumType\r\n    manager: Manager\r\n    town: Town;\r\n    transport: Transport;\r\n\r\n    constructor(asset: AccountAsset, flow: Flow, item: ItemEnumType, manager: Manager, town: Town, transport: Transport) {\r\n        this.asset = asset;\r\n        this.flow = flow;\r\n        this.item = item;\r\n        this.manager = manager;\r\n        this.town = town;\r\n        this.transport = transport;\r\n    }\r\n\r\n    get cost() {\r\n        return this.manager.maxBuyPrice;\r\n    }\r\n\r\n    get cost_flowed() {\r\n        if (!this.flowed) {\r\n            return 0.0;\r\n        }\r\n\r\n        return this.asset.purchase * this.asset.purchase_price;\r\n    }\r\n\r\n    get flowed() {\r\n        return this.flow.imported || 0;\r\n    }\r\n\r\n    get marketData() {\r\n        return this.town.market[this.item];\r\n    }\r\n\r\n    get volume() {\r\n        return this.manager.buyVolume;\r\n    }\r\n\r\n    get volumeFlowed() {\r\n        return this.flow.imported || 0;\r\n    }\r\n\r\n    async buy(volume: number, price: number) {\r\n        await this.transport.buy(this.item, volume, price);\r\n    }\r\n\r\n    async fetchMarketDetails() {\r\n        return await this.town.fetchMarketItem(this.item);\r\n    }\r\n\r\n    async patchManager(buyPrice?: number, buyVolume?: number, sellPrice?: number, sellVolume?: number) {\r\n        await this.transport.patchManager(this.item, buyPrice, buyVolume, sellPrice, sellVolume);\r\n    }\r\n}\r\n\r\nexport class Imports extends Object {\r\n    private data: { [key: string]: Import };\r\n\r\n    constructor(data: { [key: string]: Import }) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: ItemEnumType): Import | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: ItemEnumType, value: Import) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    get cost(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.cost, 0);\r\n    }\r\n\r\n    get costFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.cost_flowed, 0);\r\n    }\r\n\r\n    get flowed(): Imports {\r\n        return new Imports(\r\n            Object.entries(this.data).reduce((acc, [item, imp]) => {\r\n                if (imp.flowed) {\r\n                    acc[item] = imp;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n\r\n    get volume(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.volume, 0);\r\n    }\r\n\r\n    get volumeFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imp) => acc + imp.volumeFlowed, 0);\r\n    }\r\n}\r\n\r\nexport class ImportsList extends Array<Import> {\r\n\r\n    private data: Import[];\r\n    get cost(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.cost, 0);\r\n    }\r\n\r\n    get costFlowed(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.cost_flowed, 0);\r\n    }\r\n\r\n    get flowed(): ImportsList {\r\n        return new ImportsList(...this.data.filter((imp) => imp.flowed));\r\n    }\r\n\r\n    get volume(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.volume, 0);\r\n    }\r\n\r\n    get volumeFlowed(): number {\r\n        return this.data.reduce((acc, imp) => acc + imp.volumeFlowed, 0);\r\n    }\r\n\r\n    byTownId(id: number): ImportsList {\r\n        return new ImportsList(...this.data.filter((imp) => +imp.town.data.id === id));\r\n    }\r\n\r\n    byTownName(name: string): ImportsList {\r\n        return new ImportsList(...this.data.filter((imp) => imp.town.data.name === name));\r\n    }\r\n}\r\n\r\nexport class ImportsSummed extends Object {\r\n    private data: { [key: string]: ImportsList };\r\n\r\n    constructor(data: { [key: string]: ImportsList } = {}) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    get(key: string): ImportsList | undefined {\r\n        return this.data[key];\r\n    }\r\n\r\n    set(key: string, value: ImportsList) {\r\n        this.data[key] = value;\r\n    }\r\n\r\n    get cost(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.cost, 0);\r\n    }\r\n\r\n    get costFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.costFlowed, 0);\r\n    }\r\n\r\n    get flowed(): ImportsSummed {\r\n        return new ImportsSummed(\r\n            Object.entries(this.data).reduce((acc, [item, imps]) => {\r\n                if (imps.flowed) {\r\n                    acc[item] = imps;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n\r\n    get volume(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.volume, 0);\r\n    }\r\n\r\n    get volumeFlowed(): number {\r\n        return Object.values(this.data).reduce((acc, imps) => acc + imps.volumeFlowed, 0);\r\n    }\r\n\r\n    byTownId(id: number): ImportsSummed {\r\n        return new ImportsSummed(\r\n            Object.entries(this.data).reduce((acc, [item, imps]) => {\r\n                if (+imps[0].town.data.id === id) { // Convert to number using +\r\n                    acc[item] = imps;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n\r\n    byTownName(name: string): ImportsSummed {\r\n        return new ImportsSummed(\r\n            Object.entries(this.data).reduce((acc, [item, imps]) => {\r\n                if (imps[0].town.data.name === name) {\r\n                    acc[item] = imps;\r\n                }\r\n                return acc;\r\n            }, {})\r\n        );\r\n    }\r\n}","// Import necessary types and classes\r\nimport { BuildingOperation as BuildingOperationModel } from \"../models/building\";\r\nimport Client from \"../client\";\r\nimport {Player} from \"./player\";\r\nimport {Building} from \"./building\";\r\nimport {Flow} from \"../models\";\r\nimport {ItemEnumType} from \"../schema/enums\";\r\nimport {BuildingTypeEnumType} from \"../schema/enums\";\r\nimport { Operation as OperationModel } from \"../models/operation\";\r\nimport {Ingredient} from \"../models\";\r\nimport {Recipe} from \"./recipe\";\r\n\r\n// Define the BuildingOperation class\r\nexport class BuildingOperation {\r\n    data: BuildingOperationModel;\r\n    operations: OperationsList;\r\n    _client: Client\r\n    player: Player;\r\n    buildingId: number;\r\n\r\n    constructor(client: Client, player: Player, buildingId: number) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.buildingId = buildingId;\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        this.data = await this._client.buildingsApi.getOperations(this.buildingId);\r\n        if (this.data && this.data.operations) {\r\n            console.log(JSON.stringify(this.data.total_flow));\r\n            this.operations = new OperationsList(\r\n                ...(await Promise.all(\r\n                    this.data.operations.map((operation) => {\r\n                        return this._client.getOperation(this.player, this, operation);\r\n                    })\r\n                ))\r\n            );\r\n        } else {\r\n            this.operations = new OperationsList();\r\n        }\r\n    }\r\n\r\n    get building(): Building | undefined {\r\n        return this.player.buildings.byId(this.buildingId);\r\n    }\r\n\r\n    get totalFlow(): Map<ItemEnumType, Flow> | null {\r\n        return new Map(Object.entries(this.data.total_flow).map(([key, value]) => [key as ItemEnumType, value]));\r\n    }\r\n}\r\n\r\n// Define the BuildingOperationList class\r\nexport class BuildingOperationList extends Array<BuildingOperation> {\r\n    byBuildingId(buildingId: number): BuildingOperation {\r\n        return this.find((o) => o.buildingId === buildingId);\r\n    }\r\n\r\n    byItemInput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...this.flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.inputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    byItemOutput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...this.flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.outputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// Define the BuildingOperationsDict class\r\nexport class BuildingOperationsDict extends Map<number, BuildingOperation> {\r\n    byBuildingType(buildingType: BuildingTypeEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...Array.from(this.values()).flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.building && operation.building.type === buildingType\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    byItemInput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...Array.from(this.values()).flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.inputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    byItemOutput(item: ItemEnumType): OperationsList {\r\n        return new OperationsList(\r\n            ...Array.from(this.values()).flatMap((buildingOperation) =>\r\n                buildingOperation.operations.filter((operation) =>\r\n                    operation.recipe && item in operation.recipe.outputs\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// Define the Operation class\r\nexport class Operation {\r\n    data: OperationModel;\r\n    recipe: Recipe | null;\r\n    _client: Client;\r\n    player: Player;\r\n    buildingOperation: BuildingOperation;\r\n\r\n    constructor(\r\n        client: Client,\r\n        player: Player,\r\n        buildingOperation: BuildingOperation,\r\n        data: OperationModel\r\n    ) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.buildingOperation = buildingOperation;\r\n        this.data = data;\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        const recipes = await this._client.staticApi.getRecipes();\r\n        for (const recipe of recipes) {\r\n            if (recipe.name === this.data.recipe) {\r\n                this.recipe = await this._client.getRecipe({ recipe });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get building(): Building | undefined {\r\n        return this.player.buildings.byId(this.buildingId);\r\n    }\r\n\r\n    get buildingId(): number {\r\n        return parseInt(this.data.reference.split('/')[1]);\r\n    }\r\n\r\n    get inputs(): Map<ItemEnumType, number> {\r\n        if (!this.recipe) {\r\n            return new Map();\r\n        }\r\n        const inputs = new Map();\r\n        for (const ingredient of Object.values(this.recipe.inputs) as Ingredient[]) {\r\n            inputs.set(ingredient.product, ingredient.amount * this.data.target);\r\n        }\r\n        return inputs;\r\n    }\r\n\r\n    get outputs(): Map<ItemEnumType, number> {\r\n        if (!this.recipe) {\r\n            return new Map();\r\n        }\r\n        const outputs = new Map();\r\n        for (const ingredient of Object.values(this.recipe.outputs) as Ingredient[]) {\r\n            outputs.set(ingredient.product, ingredient.amount * this.data.target);\r\n        }\r\n        return outputs;\r\n    }\r\n}\r\n\r\n// Define the OperationsList class\r\nexport class OperationsList extends Array<Operation> {\r\n    get inputs(): Map<ItemEnumType, number> {\r\n        const inputs = new Map();\r\n        this.forEach((operation) => {\r\n            operation.inputs.forEach((amount, item) => {\r\n                inputs.set(item, (inputs.get(item) || 0) + amount);\r\n            });\r\n        });\r\n        return inputs;\r\n    }\r\n\r\n    get outputs(): Map<ItemEnumType, number> {\r\n        const outputs = new Map();\r\n        this.forEach((operation) => {\r\n            operation.outputs.forEach((amount, item) => {\r\n                outputs.set(item, (outputs.get(item) || 0) + amount);\r\n            });\r\n        });\r\n        return outputs;\r\n    }\r\n\r\n    byBuildingId(buildingId: number): OperationsList {\r\n        return new OperationsList(\r\n            ...this.filter((operation) => operation.buildingId === buildingId)\r\n        );\r\n    }\r\n}","import { ItemEnumType } from \"../schema/enums\";\r\nimport { Inventory } from '../models';\r\nimport { Town } from './town';\r\nimport {MarketItem, MarketItemDetails} from '../models';\r\nimport { TradeRoute } from '../models';\r\nimport { Exports, Export } from './exports';\r\nimport { Imports, Import } from './imports';\r\nimport Client from '../client';\r\nimport { Player } from './player';\r\nimport { Transport as TransportModel } from '../models/transport'\r\nimport { ItemTradeResult } from \"../models\";\r\nimport { Account } from \"../models\";\r\nimport { Manager } from \"../models\";\r\n\r\nexport class Transport {\r\n    id: number;\r\n    town: Town | null;\r\n    exports: Exports;\r\n    imports: Imports;\r\n    inventory: Inventory;\r\n    route: TradeRoute;\r\n    data: TransportModel;\r\n    _client: Client;\r\n    player: Player;\r\n\r\n    constructor(client: Client, player: Player, id: number) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.id = id;\r\n    }\r\n\r\n    get docked(): boolean {\r\n        return this.town !== null;\r\n    }\r\n\r\n    get market(): Record<ItemEnumType, MarketItem> | null {\r\n        if (this.docked) {\r\n            return this.town.market;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async load(): Promise<void> {\r\n        this.data = await this._client.transportsApi.get({id: this.id});\r\n        if (this.data.route) {\r\n            const data = await this._client.townsApi.getTown(this.data.route.remote_town);\r\n            this.town = new Town(this._client, this.data.route.remote_town, data);\r\n        }\r\n        this.loadImportsExports();\r\n    }\r\n\r\n    async buy(item: ItemEnumType, volume: number, price: number): Promise<ItemTradeResult> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to buy an item.');\r\n        }\r\n        const expectedBalance = this.player.storehouse.items[item].balance;\r\n        const result = await this.town.buy(item, expectedBalance, `route/${this.id}`, volume, price);\r\n        this.player.storehouse.updateAccount(await Account.validate(result.embedded[`/accounts/${this.data.route.account.id}`]));\r\n        return result;\r\n    }\r\n\r\n    async exportItem(item: ItemEnumType, volume: number, price: number): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to export an item.');\r\n        }\r\n        const manager = new Manager({ sellVolume: volume, sellPrice: price });\r\n        await this.setManager(item, manager);\r\n    }\r\n\r\n    async importItem(item: ItemEnumType, volume: number, price: number): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to import an item.');\r\n        }\r\n        const manager = new Manager({ buyVolume: volume, buyPrice: price });\r\n        await this.setManager(item, manager);\r\n    }\r\n\r\n    async patchManager(item: ItemEnumType, buyPrice?: number, buyVolume?: number, sellPrice?: number, sellVolume?: number): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to patch a manager.');\r\n        }\r\n        if (!(item in this.data.route.managers)) {\r\n            throw new Error('The item does not have a manager.');\r\n        }\r\n        const manager = this.data.route.managers[item];\r\n        if (buyPrice !== undefined) manager.buyPrice = buyPrice;\r\n        if (buyVolume !== undefined) manager.buyVolume = buyVolume;\r\n        if (sellPrice !== undefined) manager.sellPrice = sellPrice;\r\n        if (sellVolume !== undefined) manager.sellVolume = sellVolume;\r\n        this.updateRoute(await this._client.transportsApi.setManager(this.id, item, manager));\r\n    }\r\n\r\n    async sell(item: ItemEnumType, volume: number, price: number): Promise<ItemTradeResult> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to sell an item.');\r\n        }\r\n        const expectedBalance = this.player.storehouse.items[item].balance;\r\n        const result = await this.town.sell(item, expectedBalance, `route/${this.id}`, volume, price);\r\n        this.player.storehouse.updateAccount(await Account.validate(result.embedded[`/accounts/${this.data.route.account.id}`]));\r\n        return result;\r\n    }\r\n\r\n    async setManager(item: ItemEnumType, manager: Manager): Promise<void> {\r\n        if (!this.docked) {\r\n            throw new Error('The transport must be docked to set a manager.');\r\n        }\r\n        this.updateRoute(await this._client.transportsApi.setManager(this.id, item, manager));\r\n    }\r\n\r\n    updateRoute(route: TradeRoute): void {\r\n        this.data.route = route;\r\n        this.loadImportsExports();\r\n    }\r\n\r\n    loadImportsExports(): void {\r\n        if (this.docked) {\r\n            for (const item in this.route?.managers) {\r\n                const asset = this.route.account.assets[item];\r\n                const flow = this.data.route.current_flows[item];\r\n                if (this.route.managers[item].buyVolume) {\r\n                    this.imports[item] = new Import(asset, flow, item as ItemEnumType, this.route.managers[item], this.town, this);\r\n                }\r\n                if (this.route.managers[item].sellVolume) {\r\n                    this.exports[item] = new Export(asset, flow, item as ItemEnumType, this.route.managers[item], this.town, this);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class TransportList extends Array<Transport> {\r\n    byTownName(name: string): TransportList {\r\n        const transports: TransportList = new TransportList();\r\n        for (const transport of this) {\r\n            if (transport.docked && transport.town.name === name) {\r\n                transports.push(transport);\r\n            }\r\n        }\r\n        return transports;\r\n    }\r\n\r\n    searchMarkets(item: ItemEnumType): TownItem[] {\r\n        const items: TownItem[] = [];\r\n        for (const transport of this) {\r\n            if (transport.docked && item in transport.town.market) {\r\n                items.push(new TownItem(item, transport.town.market[item], transport.town));\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n}\r\n\r\nexport class TownItem {\r\n    item: ItemEnumType;\r\n    marketItem: MarketItem;\r\n    town: Town;\r\n\r\n    constructor(item: ItemEnumType, marketItem: MarketItem, town: Town) {\r\n        this.item = item;\r\n        this.marketItem = marketItem;\r\n        this.town = town;\r\n    }\r\n\r\n    fetchDetails(): Promise<MarketItemDetails> {\r\n        return this.town.fetchMarketItem(this.item);\r\n    }\r\n}","import { Player as PlayerModel, Household, Sustenance } from '../models/player';\r\nimport { Business } from '../models';\r\nimport { Building, BuildingsList } from './building';\r\nimport {Export, ExportsList, ExportsSummed} from './exports';\r\nimport {Import, Imports, ImportsList, ImportsSummed} from './imports';\r\nimport { BuildingOperation, BuildingOperationsDict } from './operation';\r\nimport { Town } from './town';\r\nimport { Transport, TransportList } from './transport';\r\nimport Client from \"../client\";\r\nimport {Storehouse} from \"./storehouse\";\r\nimport {AssetEnum} from \"../models/enums\";\r\nimport {ItemEnumType} from \"../schema/enums\";\r\n\r\ninterface PlayerType {\r\n    buildings: BuildingsList;\r\n    business: Business;\r\n    data: PlayerModel;\r\n    exports: ExportsSummed;\r\n    imports: ImportsSummed;\r\n    operations: BuildingOperationsDict;\r\n    town: Town;\r\n    transports: TransportList;\r\n}\r\n\r\nexport class Player {\r\n    _client: Client;\r\n    exports: ExportsSummed;\r\n    imports: ImportsSummed;\r\n    data: PlayerModel;\r\n    business: Business;\r\n    town: Town;\r\n    operations: BuildingOperationsDict;\r\n    buildings: BuildingsList;\r\n    transports: TransportList;\r\n    storehouse: Storehouse;\r\n\r\n    constructor(client: Client) {\r\n        this._client = client;\r\n        this.exports = new ExportsSummed();\r\n        this.imports = new ImportsSummed();\r\n    }\r\n\r\n    async load() {\r\n        this.data = await this._client.playerApi.get();\r\n        this.business = await this._client.businessesApi.get(\r\n            { id: +this.data.household.business_ids[0] }\r\n        );\r\n        this.town = await this._client.getTown(this.data.household.town_id);\r\n\r\n        let tasks = [];\r\n        for (const operation of this.data.household.operations) {\r\n            const id = parseInt(operation.split('/')[1]);\r\n            if(!operation.includes('transport')) {\r\n                tasks.push(this._client.getBuildingOperation(this, id));\r\n            }\r\n        }\r\n\r\n        this.operations = new BuildingOperationsDict(\r\n            await Promise.all(tasks).then((ops) =>\r\n                ops.map((op) => [op.buildingId, op])\r\n            )\r\n        );\r\n\r\n        let buildingTasks: Promise<Building>[] = [];\r\n        for (const id of this.business.building_ids) {\r\n            buildingTasks.push(this._client.getBuilding(this, id));\r\n        }\r\n        this.buildings = new BuildingsList(...await Promise.all(buildingTasks));\r\n\r\n        let transportTasks: Promise<Transport>[] = [];\r\n        if (this.business.transport_ids) {\r\n            for (const id of this.business.transport_ids) {\r\n                transportTasks.push(this._client.getTransport(this, id));\r\n            }\r\n        }\r\n        this.transports = new TransportList(...await Promise.all(transportTasks));\r\n\r\n        for (const transport of this.transports) {\r\n            for (const item in transport.exports) {\r\n                const exportItem: Export = transport.exports[item];\r\n                if (!this.exports[item]) {\r\n                    this.exports[item] = new ExportsList(...[exportItem]);\r\n                } else {\r\n                    this.exports[item].push(exportItem);\r\n                }\r\n            }\r\n\r\n            for (const item in transport.imports) {\r\n                const importItem: Import = transport.imports[item];\r\n                if (!this.imports[item]) {\r\n                    this.imports[item] = new ImportsList(...[importItem]);\r\n                } else {\r\n                    this.imports[item].push(importItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.storehouse = await this._client.getStorehouse(this);\r\n    }\r\n\r\n    get household() {\r\n        return this.data.household;\r\n    }\r\n\r\n    get money() {\r\n        return this.business.account.assetsMap.get(AssetEnum.Money).balance;\r\n    }\r\n\r\n    get prestige() {\r\n        return this.data.household.prestige;\r\n    }\r\n\r\n    get sustenance() {\r\n        return this.data.household.sustenance;\r\n    }\r\n\r\n    get sustenanceCost() {\r\n        let totalCost = 0;\r\n        for (const item of this.sustenanceItems) {\r\n            totalCost += this.sustenanceItemCost(item);\r\n        }\r\n        return totalCost;\r\n    }\r\n\r\n    get sustenanceItems() {\r\n        return Array.from(this.data.household.sustenance.inventory.managersMap.keys());\r\n    }\r\n\r\n    sustenanceItemConsumption(item: ItemEnumType) {\r\n        return this.data.household.sustenance.inventory.previous_flows[item].consumption;\r\n    }\r\n\r\n    sustenanceItemCost(item: ItemEnumType) {\r\n        return (\r\n            this.sustenanceItemConsumption(item) *\r\n            this.storehouse.items[item].averageCost\r\n        );\r\n    }\r\n}","// Storehouse.ts\r\nimport Client from \"../client\";\r\nimport {Building} from './building'\r\nimport { Player } from \"./player\";\r\nimport {Flow} from \"../models\";\r\nimport {Account, AccountAsset} from \"../models\";\r\nimport {Manager} from \"../models\";\r\nimport {ItemEnumType} from \"../schema/enums\";\r\nimport { ExportsList } from './exports'\r\nimport { ImportsList } from './imports'\r\nimport { BuildingTypeEnum} from \"../models/enums\";\r\nimport {MarketItem, MarketItemDetails} from \"../models\";\r\nimport {ItemTradeResult} from \"../models\";\r\n\r\nexport class Storehouse {\r\n    _client: Client;\r\n    player: Player;\r\n    items: Map<ItemEnumType, StorehouseItem>;\r\n    data: Building;\r\n\r\n    constructor(client: Client, player: Player) {\r\n        this._client = client;\r\n        this.player = player;\r\n        this.items = new Map<ItemEnumType, StorehouseItem>();\r\n    }\r\n\r\n    async load() {\r\n        const storehouses = this.player.buildings.byType(BuildingTypeEnum.Storehouse).concat(this.player.buildings.byType(BuildingTypeEnum.Warehouse));\r\n        if (!storehouses.length) {\r\n            throw new Error('No storehouses found.');\r\n        }\r\n\r\n        this.data = storehouses[0];\r\n        this._loadInventory();\r\n    }\r\n\r\n    get flows() {\r\n        return this.data.flows;\r\n    }\r\n\r\n    get id() {\r\n        return this.data.id;\r\n    }\r\n\r\n    get operations() {\r\n        return this.data.operations;\r\n    }\r\n\r\n    get previousFlows() {\r\n        return this.data.previous_flows;\r\n    }\r\n\r\n    async buy(item: ItemEnumType, volume: number, price: number) {\r\n        try {\r\n            const result = await this.player.town.buy(item, this.items.get(item)?.balance, `storage/${this.data.id}`, volume, price);\r\n            const validatedAccount = await Account.validate(result.embedded[`/accounts/${this.data.inventory.account.id}`]);\r\n            this.updateAccount(validatedAccount);\r\n            return result;\r\n        } catch (error) {\r\n            throw new Error(`Failed to buy item ${item}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n\r\n    async patchManager(item: ItemEnumType, data: any) {\r\n        await this.data.patchManager(item, data);\r\n    }\r\n\r\n    async sell(item: ItemEnumType, volume: number, price: number) {\r\n        try {\r\n            const result = await this.player.town.sell(item, this.items.get(item)?.balance, `storage/${this.data.id}`, volume, price);\r\n            const validatedAccount = await Account.validate(result.embedded[`/accounts/${this.data.inventory.account.id}`]);\r\n            this.updateAccount(validatedAccount);\r\n            return result;\r\n        } catch (error) {\r\n            throw new Error(`Failed to sell item ${item}: ${(error as Error).message}`);\r\n        }\r\n    }\r\n\r\n\r\n    async setManager(item: ItemEnumType, manager: Manager) {\r\n        await this._client.buildingsApi.setManager(this.data.id, item, manager);\r\n    }\r\n\r\n    updateAccount(account: Account) {\r\n        this.data.inventory.account = account;\r\n        this._loadInventory();\r\n    }\r\n\r\n    private _loadInventory() {\r\n        this.data.items.forEach((data, item) => {\r\n            this.items.set(item, new StorehouseItem(\r\n                data,\r\n                this.player.exports.get(item) || new ExportsList(),\r\n                this.player.imports.get(item) || new ImportsList(),\r\n                item,\r\n                this.data.inventory.managers[item] || null,\r\n                this.flows.get(item, null),\r\n                this\r\n            ));\r\n        });\r\n    }\r\n}\r\n\r\nexport class StorehouseItem {\r\n\r\n    asset: AccountAsset;\r\n    exports: ExportsList;\r\n    imports: ImportsList;\r\n    item: ItemEnumType;\r\n    manager: Manager;\r\n    flow: Flow;\r\n    storehouse: Storehouse;\r\n\r\n    constructor(\r\n        asset: AccountAsset,\r\n        exports: ExportsList,\r\n        imports: ImportsList,\r\n        item: ItemEnumType,\r\n        manager: Manager,\r\n        flow: Flow,\r\n        storehouse: Storehouse\r\n    ) {\r\n        this.asset = asset;\r\n        this.exports = exports;\r\n        this.imports = imports;\r\n        this.item = item;\r\n        this.manager = manager;\r\n        this.flow = flow;\r\n        this.storehouse = storehouse;\r\n    }\r\n\r\n\r\n    get averageCost(): number {\r\n        let totalCost = 0;\r\n        let totalVolume = 0;\r\n        if (this.produced) {\r\n            totalCost += this.productionCost;\r\n            totalVolume += this.produced;\r\n        }\r\n        if (this.imported) {\r\n            totalCost += this.importCostFlowed;\r\n            totalVolume += this.imported;\r\n        }\r\n        if (this.purchased) {\r\n            totalCost += this.purchasedCost;\r\n            totalVolume += this.purchased;\r\n        }\r\n        return totalCost / totalVolume || 0;\r\n    }\r\n\r\n    get balance(): number {\r\n        return this.asset.balance;\r\n    }\r\n\r\n    get capacity(): number {\r\n        return this.asset.capacity;\r\n    }\r\n\r\n    get consumed(): number {\r\n        return this.flow ? this.flow.consumption : 0;\r\n    }\r\n\r\n    get consumptionCost(): number {\r\n        return (this.consumed * this.averageCost) || 0;\r\n    }\r\n\r\n    get exported(): number {\r\n        return this.flow ? this.flow.export || 0 : 0;\r\n    }\r\n\r\n    get exportValue(): number {\r\n        return this.exports.value;\r\n    }\r\n\r\n    get exportValueFlowed(): number {\r\n        return this.exports.valueFlowed;\r\n    }\r\n\r\n    get exportVolume(): number {\r\n        return this.exports.volume;\r\n    }\r\n\r\n    get exportVolumeFlowed(): number {\r\n        return this.exports.volumeFlowed;\r\n    }\r\n\r\n    get imported(): number {\r\n        return this.flow ? this.flow.imported || 0 : 0;\r\n    }\r\n\r\n    get importCost(): number {\r\n        return this.imports.cost;\r\n    }\r\n\r\n    get importCostFlowed(): number {\r\n        return this.imports.costFlowed;\r\n    }\r\n\r\n    get importVolume(): number {\r\n        return this.imports.volume;\r\n    }\r\n\r\n    get importVolumeFlowed(): number {\r\n        return this.imports.volumeFlowed;\r\n    }\r\n\r\n    get marketData(): MarketItem {\r\n        return this.storehouse.player.town.item(this.item);\r\n    }\r\n\r\n    get sold(): number {\r\n        return this.flow ? this.flow.sale || 0 : 0;\r\n    }\r\n\r\n    get saleValue(): number {\r\n        return this.sold * this.asset.sale_price;\r\n    }\r\n\r\n    get produced(): number {\r\n        return this.flow ? this.flow.production : 0;\r\n    }\r\n\r\n    get productionCost(): number {\r\n        return this.flow ? this.flow.production_cost || 0 : 0;\r\n    }\r\n\r\n    get purchased(): number {\r\n        return this.flow ? this.flow.purchase || 0 : 0;\r\n    }\r\n\r\n    get purchasedCost(): number {\r\n        return this.purchased * this.asset.purchase_price;\r\n    }\r\n\r\n    buy(volume: number, price: number): Promise<ItemTradeResult> {\r\n        return this.storehouse.buy(this.item, volume, price);\r\n    }\r\n\r\n    fetchMarketDetails(): Promise<MarketItemDetails> {\r\n        return this.storehouse.player.town.fetchMarketItem(this.item);\r\n    }\r\n\r\n    patchManager(data: any): Promise<void> {\r\n        return this.storehouse.patchManager(this.item, data);\r\n    }\r\n\r\n    sell(volume: number, price: number): Promise<ItemTradeResult> {\r\n        return this.storehouse.sell(this.item, volume, price);\r\n    }\r\n\r\n    setManager(manager: Manager): Promise<void> {\r\n        return this.storehouse.setManager(this.item, manager);\r\n    }\r\n}","export * from './building';\nexport * from './exports';\nexport * from './imports';\nexport * from './operation';\nexport * from './player';\nexport * from './recipe';\nexport * from './storehouse';\nexport * from './town';\nexport * from './transport';\n","export * from './buildings';\nexport * from './businesses';\nexport * from './players';\nexport * from './regions';\nexport * from './static';\nexport * from './towns';\nexport * from './transports';\nexport * from './turns';\n"],"mappings":"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","names":["axios","AssetEnum","BuildingTypeEnum","BuildingUpgradeTypeEnum","ClimateEnum","ItemEnum","ItemTypeEnum","RecipeEnum","SkillEnum","SkillLevelEnum","TransportTypeEnum","enums_exports","enums_exports","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","pickBy","_","Town","Recipe","Building","Recipe","acc","BuildingOperation","Operation","Transport","Town","Player","axios","Player","Town","Building","BuildingOperation","Operation","Recipe","Transport","Building","BuildingOperation","Operation","Player","Recipe","Town","Transport"]}